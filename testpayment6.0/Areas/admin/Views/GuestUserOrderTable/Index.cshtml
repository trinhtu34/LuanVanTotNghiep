@{
    ViewData["Title"] = "Đặt Bàn Cho Khách (Nhân Viên)";
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
    var groupedTables = ViewBag.GroupedTables as IEnumerable<IGrouping<int, dynamic>>;
}

<div class="container mt-4">
    <h2 class="text-center mb-4">
        <i class="fas fa-user-tie"></i> Đặt Bàn Cho Khách Hàng
        <small class="text-muted d-block mt-2">Khách hàng đặt bàn trực tiếp tại nhà hàng</small>
    </h2>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }
    <!-- Danh sách bàn đã chọn -->
    <div class="selected-tables-section mb-4" id="selectedTablesSection" style="display: none;">
        <div class="card border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-shopping-cart"></i> Bàn đã chọn
                    <span class="badge bg-light text-primary ms-2" id="selectedCount">0</span>
                </h5>
            </div>
            <div class="card-body">
                <div id="selectedTablesList" class="row"></div>
                <hr>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>Tổng tiền cọc: <span id="totalDeposit" class="text-primary">0 VNĐ</span></strong>
                    </div>
                    <div>
                        <button class="btn btn-warning btn-sm me-2" id="clearAllBtn">
                            <i class="fas fa-trash"></i> Xóa tất cả
                        </button>
                        <button class="btn btn-success" id="proceedBookingBtn">
                            <i class="fas fa-calendar-check"></i> Tiến hành đặt bàn
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Giỏ món ăn đã chọn -->
    <div class="selected-foods-section mb-4" id="selectedFoodsSection" style="display: none;">
        <div class="card border-success">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">
                    <i class="fas fa-utensils"></i> Món ăn đã chọn
                    <span class="badge bg-light text-success ms-2" id="selectedFoodCount">0</span>
                </h5>
            </div>
            <div class="card-body">
                <div id="selectedFoodsList" class="row"></div>
                <hr>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>Tổng tiền món ăn: <span id="totalFoodPrice" class="text-success">0 VNĐ</span></strong>
                    </div>
                    <div>
                        <button class="btn btn-warning btn-sm" id="clearAllFoodsBtn">
                            <i class="fas fa-trash"></i> Xóa tất cả món
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (groupedTables != null && groupedTables.Any())
    {
        @foreach (var regionGroup in groupedTables)
        {
            <div class="region-section mb-5">
                <h4 class="region-title mb-3">Khu vực @regionGroup.Key</h4>

                <!-- Tab Navigation -->
                <ul class="nav nav-tabs" id="region@(regionGroup.Key)Tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="tables-tab-@regionGroup.Key" data-bs-toggle="tab"
                                data-bs-target="#tables-@regionGroup.Key" type="button" role="tab">
                            <i class="fas fa-table"></i> Bàn (@regionGroup.Count())
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="menu-tab-@regionGroup.Key" data-bs-toggle="tab"
                                data-bs-target="#menu-@regionGroup.Key" type="button" role="tab"
                                onclick="loadMenuForRegion(@regionGroup.Key)">
                            <i class="fas fa-utensils"></i> Thực đơn
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="region@(regionGroup.Key)TabContent">
                    <!-- Tables Tab -->
                    <div class="tab-pane fade show active" id="tables-@regionGroup.Key" role="tabpanel">
                        <div class="row mt-3">
                            @foreach (var table in regionGroup)
                            {
                                <div class="col-md-4 col-lg-3 mb-3">
                                    <div class="card table-card" data-table-id="@table.TableId">
                                        <div class="card-body text-center">
                                            <div class="selected-indicator" style="display: none;">
                                                <i class="fas fa-check-circle text-success"></i>
                                            </div>
                                            <h5 class="card-title">Bàn @table.TableId</h5>
                                            <p class="card-text">
                                                <i class="fas fa-users"></i> Sức chứa: @table.Capacity người<br>
                                                <i class="fas fa-money-bill-wave"></i> Cọc: @string.Format("{0:N0}", table.Deposit) VNĐ<br>
                                                <small class="text-muted">@table.Description</small>
                                            </p>
                                            <button class="btn btn-outline-primary btn-chon-ban"
                                                    data-table-id="@table.TableId"
                                                    data-deposit="@table.Deposit"
                                                    data-capacity="@table.Capacity"
                                                    data-description="@table.Description">
                                                <i class="fas fa-plus"></i> Chọn bàn
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Menu Tab -->
                    <div class="tab-pane fade" id="menu-@regionGroup.Key" role="tabpanel">
                        <div class="row mt-3" id="menuContainer-@regionGroup.Key">
                            <div class="col-12 text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Đang tải...</span>
                                </div>
                                <p class="mt-2">Đang tải thực đơn...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle"></i> Không có bàn nào khả dụng
        </div>
    }
</div>

<!-- Modal đặt bàn -->
<div class="modal fade" id="datBanModal" tabindex="-1" aria-labelledby="datBanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="datBanModalLabel">
                    <i class="fas fa-clipboard-check"></i> Xác nhận đặt bàn tại chỗ
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="fw-bold mb-3">Danh sách bàn đã chọn:</h6>
                        <div id="modalTablesList" class="border rounded p-3 bg-light mb-3"></div>
                        <div class="mb-3">
                            <label for="startingTime" class="form-label">Thời gian bắt đầu <span class="text-danger">*</span></label>
                            <input type="datetime-local" class="form-control" id="startingTime" name="startingTime" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Tổng tiền cọc:</strong></label>
                            <h5 class="text-primary" id="modalTotalDeposit">0 VNĐ</h5>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="fw-bold mb-3">Món ăn đã chọn:</h6>
                        <div id="modalFoodsList" class="border rounded p-3 bg-light mb-3" style="max-height: 300px; overflow-y: auto;"></div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Tổng tiền món ăn:</strong></label>
                            <h5 class="text-success" id="modalTotalFoodPrice">0 VNĐ</h5>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Tổng cộng:</strong></label>
                            <h4 class="text-danger fw-bold" id="modalGrandTotal">0 VNĐ</h4>
                        </div>
                    </div>
                </div>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Lưu ý:</strong> Đặt bàn được thực hiện bởi nhân viên. Khách hàng cần đến nhà hàng đúng giờ đã đặt và thanh toán tại quầy.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="confirmDatBan">
                    <i class="fas fa-check"></i> Xác nhận đặt bàn
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Loading -->
<div class="modal fade" id="loadingModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Đang xử lý...</p>
            </div>
        </div>
    </div>
</div>

<style>
    .table-card, .food-card {
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        transition: all 0.3s ease;
        position: relative;
    }

        .table-card:hover, .food-card:hover {
            border-color: #007bff;
            box-shadow: 0 4px 8px rgba(0,123,255,0.2);
            transform: translateY(-2px);
        }

        .table-card.selected {
            border-color: #28a745;
            background-color: #f8fff9;
            box-shadow: 0 4px 8px rgba(40,167,69,0.3);
        }

        .food-card.selected {
            border-color: #ffc107;
            background-color: #fffdf0;
            box-shadow: 0 4px 8px rgba(255,193,7,0.3);
        }

    .selected-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.5rem;
    }

    .btn-chon-ban, .btn-chon-mon {
        width: 100%;
        padding: 10px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-chon-ban.selected {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }

        .btn-chon-mon.selected {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #212529;
        }

    .region-title {
        color: #495057;
        border-bottom: 2px solid #007bff;
        padding-bottom: 8px;
    }

    .region-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
    }

    .card-title {
        color: #007bff;
        font-weight: bold;
    }

    .fas {
        margin-right: 5px;
    }

    .selected-table-item, .selected-food-item {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        position: relative;
    }

    .remove-table-btn, .remove-food-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        font-size: 12px;
        cursor: pointer;
    }

    .selected-tables-section, .selected-foods-section {
        position: sticky;
        top: 20px;
        z-index: 100;
    }

    .customer-info-section {
        position: sticky;
        top: 20px;
        z-index: 101;
    }

    .food-image {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 8px;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin: 10px 0;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        border: 1px solid #dee2e6;
        background: white;
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-input {
        width: 60px;
        text-align: center;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 5px;
    }

    .nav-tabs .nav-link {
        color: #495057;
        font-weight: 500;
    }

        .nav-tabs .nav-link.active {
            color: #007bff;
            font-weight: bold;
        }

    .customer-summary {
        border: 1px solid #17a2b8;
    }

    .customer-info-section .card-header {
        background: linear-gradient(135deg, #17a2b8, #138496);
    }
</style>

<script>
    class AdminRestaurantBookingManager {
        constructor() {
            this.selectedTables = new Map();
            this.selectedFoods = new Map();
            this.loadedMenus = new Set();
            this.elements = this.getElements();
            this.init();
        }

        getElements() {
            return {
                // Original elements
                selectedSection: document.getElementById("selectedTablesSection"),
                selectedList: document.getElementById("selectedTablesList"),
                selectedCount: document.getElementById("selectedCount"),
                totalDeposit: document.getElementById("totalDeposit"),
                selectedFoodsSection: document.getElementById("selectedFoodsSection"),
                selectedFoodsList: document.getElementById("selectedFoodsList"),
                selectedFoodCount: document.getElementById("selectedFoodCount"),
                totalFoodPrice: document.getElementById("totalFoodPrice"),
                modalTablesList: document.getElementById("modalTablesList"),
                modalFoodsList: document.getElementById("modalFoodsList"),
                modalTotalDeposit: document.getElementById("modalTotalDeposit"),
                modalTotalFoodPrice: document.getElementById("modalTotalFoodPrice"),
                modalGrandTotal: document.getElementById("modalGrandTotal"),
                startingTime: document.getElementById("startingTime"),
                datBanModal: document.getElementById("datBanModal"),
                loadingModal: document.getElementById("loadingModal"),

            };
        }

        init() {
            this.setupEventListeners();
            this.setDefaultTime();
        }

        setDefaultTime() {
            // Lấy thời gian hiện tại theo múi giờ Việt Nam (UTC+7)
            const now = new Date();
            const vietnamTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));

            // Thêm 1 giờ để đảm bảo có thời gian chuẩn bị
            vietnamTime.setHours(vietnamTime.getHours() + 1);

            // Format theo định dạng datetime-local (YYYY-MM-DDTHH:MM)
            const year = vietnamTime.getFullYear();
            const month = String(vietnamTime.getMonth() + 1).padStart(2, '0');
            const day = String(vietnamTime.getDate()).padStart(2, '0');
            const hours = String(vietnamTime.getHours()).padStart(2, '0');
            const minutes = String(vietnamTime.getMinutes()).padStart(2, '0');

            this.elements.startingTime.value = `${year}-${month}-${day}T${hours}:${minutes}`;

            // Đặt giá trị tối thiểu là thời gian hiện tại của Việt Nam
            const minTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));
            const minYear = minTime.getFullYear();
            const minMonth = String(minTime.getMonth() + 1).padStart(2, '0');
            const minDay = String(minTime.getDate()).padStart(2, '0');
            const minHours = String(minTime.getHours()).padStart(2, '0');
            const minMinutes = String(minTime.getMinutes()).padStart(2, '0');

            this.elements.startingTime.min = `${minYear}-${minMonth}-${minDay}T${minHours}:${minMinutes}`;
        }

        setupEventListeners() {
            document.addEventListener("click", this.handleClick.bind(this));
            document.addEventListener("change", this.handleChange.bind(this));
        }

        handleClick(e) {
            const target = e.target.closest("button");
            if (!target) return;

            const actions = {
                "btn-chon-ban": () => this.toggleTable(target),
                "btn-chon-mon": () => this.toggleFood(target),
                "remove-table-btn": () => this.removeTable(target.dataset.tableId),
                "remove-food-btn": () => this.removeFood(target.dataset.dishId),
                clearAllBtn: () => this.clearAllTables(),
                clearAllFoodsBtn: () => this.clearAllFoods(),
                proceedBookingBtn: () => this.showBookingModal(),
                confirmDatBan: () => this.confirmBooking(),
                "quantity-btn": () => this.handleQuantityChange(target),
            };

            const action = Object.keys(actions).find(
                (cls) => target.classList.contains(cls) || target.id === cls
            );

            if (action) {
                e.preventDefault();
                actions[action]();
            }
        }

        handleChange(e) {
            if (e.target.classList.contains("quantity-input")) {
                this.updateFoodQuantity(e.target);
            }
        }

        // Table management methods (same as original)
        toggleTable(button) {
            const tableData = this.getTableData(button);
            const { tableId } = tableData;
            const tableCard = button.closest(".table-card");
            const indicator = tableCard.querySelector(".selected-indicator");

            if (this.selectedTables.has(tableId)) {
                this.deselectTable(tableId, tableCard, button, indicator);
            } else {
                this.selectTable(tableData, tableCard, button, indicator);
            }

            this.updateTableUI();
        }

        getTableData(button) {
            return {
                tableId: String(button.dataset.tableId),
                deposit: button.dataset.deposit,
                capacity: button.dataset.capacity,
                description: button.dataset.description,
            };
        }

        selectTable(tableData, card, button, indicator) {
            this.selectedTables.set(tableData.tableId, tableData);
            this.updateTableVisual(card, button, indicator, true);
        }

        deselectTable(tableId, card, button, indicator) {
            this.selectedTables.delete(tableId);
            this.updateTableVisual(card, button, indicator, false);
        }

        updateTableVisual(card, button, indicator, isSelected) {
            const method = isSelected ? "add" : "remove";
            card.classList[method]("selected");
            button.classList[method]("selected");
            button.innerHTML = isSelected
                ? '<i class="fas fa-check"></i> Đã chọn'
                : '<i class="fas fa-plus"></i> Chọn bàn';
            indicator.style.display = isSelected ? "block" : "none";
        }

        removeTable(tableId) {
            if (!tableId || !this.selectedTables.has(String(tableId))) return;

            const tableCard = document.querySelector(
                `.table-card[data-table-id="${tableId}"]`
            );
            if (tableCard) {
                const button = tableCard.querySelector(".btn-chon-ban");
                const indicator = tableCard.querySelector(".selected-indicator");
                this.deselectTable(String(tableId), tableCard, button, indicator);
                this.updateTableUI();
            }
        }

        clearAllTables() {
            Array.from(this.selectedTables.keys()).forEach((tableId) =>
                this.removeTable(tableId)
            );
        }

        // Food management methods (same as original)
        toggleFood(button) {
            const foodData = this.getFoodData(button);
            const { dishId } = foodData;

            if (this.selectedFoods.has(dishId)) {
                this.removeFood(dishId);
            } else {
                this.selectFood(foodData, button);
            }
        }

        getFoodData(button) {
            return {
                dishId: String(button.dataset.dishId),
                dishName: button.dataset.dishName,
                price: parseFloat(button.dataset.price),
                images: button.dataset.images,
                quantity: 1,
            };
        }

        selectFood(foodData, button) {
            this.selectedFoods.set(foodData.dishId, foodData);
            this.updateFoodVisual(button, true);
            this.updateFoodUI();
        }

        removeFood(dishId) {
            if (!dishId || !this.selectedFoods.has(String(dishId))) return;

            this.selectedFoods.delete(String(dishId));
            const button = document.querySelector(
                `.btn-chon-mon[data-dish-id="${dishId}"]`
            );
            if (button) {
                this.updateFoodVisual(button, false);
            }
            this.updateFoodUI();
        }

        clearAllFoods() {
                Array.from(this.selectedFoods.keys()).forEach((dishId) =>
                    this.removeFood(dishId)
                );
            }

            handleQuantityChange(button) {
                const dishId = button.dataset.dishId;
                const action = button.dataset.action;

                if (!dishId || !this.selectedFoods.has(dishId)) return;

                const food = this.selectedFoods.get(dishId);
                const currentQuantity = food.quantity;

                if (action === 'increase') {
                    food.quantity = currentQuantity + 1;
                } else if (action === 'decrease' && currentQuantity > 1) {
                    food.quantity = currentQuantity - 1;
                }

                this.selectedFoods.set(dishId, food);
                this.updateFoodUI();
            }

            updateFoodQuantity(input) {
                const dishId = input.dataset.dishId;
                const quantity = parseInt(input.value) || 1;

                if (!dishId || !this.selectedFoods.has(dishId)) return;

                const food = this.selectedFoods.get(dishId);
                food.quantity = Math.max(1, quantity);

                this.selectedFoods.set(dishId, food);
                this.updateFoodUI();
            }

            // UI Update methods
            updateTableUI() {
                const count = this.selectedTables.size;
                const total = Array.from(this.selectedTables.values())
                    .reduce((sum, table) => sum + parseFloat(table.deposit), 0);

                this.elements.selectedCount.textContent = count;
                this.elements.totalDeposit.textContent = this.formatCurrency(total);
                this.elements.selectedSection.style.display = count > 0 ? "block" : "none";

                this.updateSelectedTablesList();
            }

            updateFoodUI() {
                const count = this.selectedFoods.size;
                const total = Array.from(this.selectedFoods.values())
                    .reduce((sum, food) => sum + (food.price * food.quantity), 0);

                this.elements.selectedFoodCount.textContent = count;
                this.elements.totalFoodPrice.textContent = this.formatCurrency(total);
                this.elements.selectedFoodsSection.style.display = count > 0 ? "block" : "none";

                this.updateSelectedFoodsList();
            }

            updateSelectedTablesList() {
                if (!this.elements.selectedList) return;

                this.elements.selectedList.innerHTML = '';

                this.selectedTables.forEach((table, tableId) => {
                    const tableDiv = document.createElement('div');
                    tableDiv.className = 'col-md-6 col-lg-4 mb-2';
                    tableDiv.innerHTML = `
                        <div class="selected-table-item">
                            <button class="remove-table-btn" data-table-id="${tableId}" title="Xóa bàn">
                                <i class="fas fa-times"></i>
                            </button>
                            <h6 class="mb-1 text-primary">Bàn ${tableId}</h6>
                            <small class="text-muted d-block">
                                <i class="fas fa-users"></i> ${table.capacity} người
                            </small>
                            <small class="text-success">
                                <i class="fas fa-money-bill-wave"></i> ${this.formatCurrency(table.deposit)}
                            </small>
                        </div>
                    `;
                    this.elements.selectedList.appendChild(tableDiv);
                });
            }

            updateSelectedFoodsList() {
                if (!this.elements.selectedFoodsList) return;

                this.elements.selectedFoodsList.innerHTML = '';

                this.selectedFoods.forEach((food, dishId) => {
                    const foodDiv = document.createElement('div');
                    foodDiv.className = 'col-md-6 col-lg-4 mb-2';
                    foodDiv.innerHTML = `
                        <div class="selected-food-item">
                            <button class="remove-food-btn" data-dish-id="${dishId}" title="Xóa món">
                                <i class="fas fa-times"></i>
                            </button>
                            <h6 class="mb-1 text-success">${food.dishName}</h6>
                            <div class="quantity-controls">
                                <button class="quantity-btn" data-dish-id="${dishId}" data-action="decrease">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="number" class="quantity-input" value="${food.quantity}"
                                       min="1" data-dish-id="${dishId}">
                                <button class="quantity-btn" data-dish-id="${dishId}" data-action="increase">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                            <small class="text-muted">
                                ${this.formatCurrency(food.price)} x ${food.quantity} =
                                <strong class="text-success">${this.formatCurrency(food.price * food.quantity)}</strong>
                            </small>
                        </div>
                    `;
                    this.elements.selectedFoodsList.appendChild(foodDiv);
                });
            }

            // Modal and booking methods
            showBookingModal() {
                if (this.selectedTables.size === 0) {
                    alert("Vui lòng chọn ít nhất một bàn để đặt");
                    return;
                }
                this.updateModalContent();

                const modal = new bootstrap.Modal(this.elements.datBanModal);
                modal.show();
            }

            updateModalContent() {
                // Update tables in modal
                this.updateModalTablesList();

                // Update foods in modal
                this.updateModalFoodsList();

                // Update totals
                this.updateModalTotals();
            }

            updateModalTablesList() {
                if (!this.elements.modalTablesList) return;

                this.elements.modalTablesList.innerHTML = '';

                this.selectedTables.forEach((table, tableId) => {
                    const tableDiv = document.createElement('div');
                    tableDiv.className = 'mb-2 p-2 border rounded';
                    tableDiv.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong class="text-primary">Bàn ${tableId}</strong>
                                <small class="text-muted d-block">
                                    <i class="fas fa-users"></i> ${table.capacity} người
                                </small>
                            </div>
                            <div class="text-end">
                                <strong class="text-success">${this.formatCurrency(table.deposit)}</strong>
                            </div>
                        </div>
                    `;
                    this.elements.modalTablesList.appendChild(tableDiv);
                });
            }

            updateModalFoodsList() {
                if (!this.elements.modalFoodsList) return;

                if (this.selectedFoods.size === 0) {
                    this.elements.modalFoodsList.innerHTML = '<p class="text-muted text-center">Chưa chọn món ăn nào</p>';
                    return;
                }

                this.elements.modalFoodsList.innerHTML = '';

                this.selectedFoods.forEach((food, dishId) => {
                    const foodDiv = document.createElement('div');
                    foodDiv.className = 'mb-2 p-2 border rounded';
                    foodDiv.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong class="text-success">${food.dishName}</strong>
                                <small class="text-muted d-block">
                                    ${this.formatCurrency(food.price)} x ${food.quantity}
                                </small>
                            </div>
                            <div class="text-end">
                                <strong class="text-warning">${this.formatCurrency(food.price * food.quantity)}</strong>
                            </div>
                        </div>
                    `;
                    this.elements.modalFoodsList.appendChild(foodDiv);
                });
            }

            updateModalTotals() {
                const depositTotal = Array.from(this.selectedTables.values())
                    .reduce((sum, table) => sum + parseFloat(table.deposit), 0);

                const foodTotal = Array.from(this.selectedFoods.values())
                    .reduce((sum, food) => sum + (food.price * food.quantity), 0);

                const grandTotal = depositTotal + foodTotal;

                this.elements.modalTotalDeposit.textContent = this.formatCurrency(depositTotal);
                this.elements.modalTotalFoodPrice.textContent = this.formatCurrency(foodTotal);
                this.elements.modalGrandTotal.textContent = this.formatCurrency(grandTotal);
            }

            // Booking confirmation and API call
            async confirmBooking() {
                if (!this.validateBookingData()) {
                    return;
                }

                const bookingData = this.prepareBookingData();

                try {
                    this.showLoadingModal();
                    await this.submitBooking(bookingData);
                    this.handleBookingSuccess();
                } catch (error) {
                    this.handleBookingError(error);
                } finally {
                    this.hideLoadingModal();
                }
            }

            validateBookingData() {
                // Validate selected tables
                if (this.selectedTables.size === 0) {
                    alert("Vui lòng chọn ít nhất một bàn");
                    return false;
                }

                // Validate starting time
                const startingTime = this.elements.startingTime.value;
                if (!startingTime) {
                    alert("Vui lòng chọn thời gian bắt đầu");
                    return false;
                }

                // Check if selected time is in the future
                const selectedTime = new Date(startingTime);
                const now = new Date();
                if (selectedTime <= now) {
                    alert("Thời gian bắt đầu phải sau thời gian hiện tại");
                    return false;
                }

                return true;
            }

            prepareBookingData() {
                // Generate random userId (similar to DateTime.Now.Ticks in C#)
                const userId = Date.now().toString() + Math.random().toString(36).substr(2, 9);

                const bookingData = {
                    // Generated userId for admin booking
                    userId: userId,

                    // Booking details
                    startingTime: this.elements.startingTime.value,

                    // Selected tables
                    selectedTables: Array.from(this.selectedTables.values()).map(table => ({
                        tableId: table.tableId,
                        deposit: parseFloat(table.deposit),
                        capacity: parseInt(table.capacity),
                        description: table.description
                    })),

                    // Selected foods (if any)
                    selectedFoods: Array.from(this.selectedFoods.values()).map(food => ({
                        dishId: food.dishId,
                        dishName: food.dishName,
                        price: food.price,
                        quantity: food.quantity,
                        totalPrice: food.price * food.quantity
                    })),

                    // Totals
                    totalDeposit: Array.from(this.selectedTables.values())
                        .reduce((sum, table) => sum + parseFloat(table.deposit), 0),

                    totalFoodPrice: Array.from(this.selectedFoods.values())
                        .reduce((sum, food) => sum + (food.price * food.quantity), 0),

                    // Mark as admin booking
                    isAdminBooking: true,
                    bookingType: 'ADMIN'
                };

                // Calculate grand total
                bookingData.grandTotal = bookingData.totalDeposit + bookingData.totalFoodPrice;

                return bookingData;
            }

            async submitBooking(bookingData) {
                const response = await fetch('/Admin/GuestUserOrderTableController/CreateBooking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify(bookingData)
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }

                return await response.json();
            }

            handleBookingSuccess() {
                this.hideLoadingModal();

                // Hide booking modal
                const modal = bootstrap.Modal.getInstance(this.elements.datBanModal);
                if (modal) {
                    modal.hide();
                }

                // Show success message
                alert("Đặt bàn thành công! Thông tin đặt bàn đã được ghi nhận.");

                // Reset form
                this.resetForm();

                // Optionally redirect to bookings list
                // window.location.href = '/Admin/GuestUserOrderTable/Index';
            }

            handleBookingError(error) {
                this.hideLoadingModal();
                console.error('Booking error:', error);
                alert(`Có lỗi xảy ra khi đặt bàn: ${error.message}`);
            }

            resetForm() {
                // Clear selected tables and foods
                this.clearAllTables();
                this.clearAllFoods();

                // Reset starting time
                this.setDefaultTime();
            }

        async loadMenuForRegion(regionId)
        {
            console.log(`Starting to load menu for region: ${regionId}`);

            if (this.loadedMenus.has(regionId)) {
                console.log(`Menu for region ${regionId} already loaded`);
                return; // Menu already loaded
            }

            const container = document.getElementById(`menuContainer-${regionId}`);
            if (!container) {
                console.error(`Container menuContainer-${regionId} not found`);
                return;
            }

            try {
                const url = `/Admin/GuestUserOrderTable/GetMenuByRegion?regionId=${regionId}`;
                console.log(`Calling backend URL: ${url}`);

                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        // Thêm anti-forgery token nếu cần
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });

                console.log(`Response status: ${response.status}`);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                }

                const menuData = await response.json();
                console.log('Menu data received from backend:', menuData);

                // Kiểm tra dữ liệu
                if (!Array.isArray(menuData)) {
                    console.error('Expected array but received:', typeof menuData, menuData);
                    throw new Error('Invalid data format received from server');
                }

                this.renderMenu(container, menuData);
                this.loadedMenus.add(regionId);

                console.log(`Successfully loaded ${menuData.length} menu items for region ${regionId}`);

            } catch (error) {
                console.error('Error loading menu:', error);
                container.innerHTML = `
                    <div class="col-12 text-center">
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Không thể tải thực đơn</strong><br>
                            <small>Lỗi: ${error.message}</small><br>
                            <small>Region ID: ${regionId}</small>
                            <button class="btn btn-sm btn-outline-primary mt-2" onclick="bookingManager.retryLoadMenu(${regionId})">
                                <i class="fas fa-redo"></i> Thử lại
                            </button>
                        </div>
                    </div>
                `;
            }
        }
        renderMenu(container, menuData) 
        {
            console.log(`Rendering menu with ${menuData.length} items`);

            if (!menuData || menuData.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            Khu vực này chưa có thực đơn
                        </div>
                    </div>
                `;
                return;
            }

            container.innerHTML = '';

            menuData.forEach((dish, index) => 
            {
                console.log(`Rendering dish ${index + 1}:`, dish);

                const dishDiv = document.createElement('div');
                dishDiv.className = 'col-md-4 col-lg-3 mb-3';

                // Xử lý image với error handling
                let imageUrl = '/images/default-food.jpg';
                if (dish.images && dish.images.trim() !== '') {
                    const images = dish.images.split(',');
                    imageUrl = images[0].trim();
                    // Kiểm tra xem có phải là absolute URL không
                    if (!imageUrl.startsWith('http') && !imageUrl.startsWith('/')) {
                        imageUrl = '/' + imageUrl;
                    }
                }

                const isSelected = this.selectedFoods.has(String(dish.dishId));

                dishDiv.innerHTML = `
                    <div class="card food-card ${isSelected ? 'selected' : ''}" data-dish-id="${dish.dishId}">
                        <img src="${imageUrl}" class="food-image" alt="${dish.dishName || 'Món ăn'}"
                             onerror="this.src='/images/default-food.jpg'; console.log('Image load failed for: ${imageUrl}');">
                        <div class="card-body">
                            <h6 class="card-title">${dish.dishName || 'Món ăn'}</h6>
                            <p class="card-text">
                                <strong class="text-success">${this.formatCurrency(dish.price || 0)}</strong>
                            </p>
                            <p class="card-text">
                                <small class="text-muted">${dish.description || 'Món ăn ngon'}</small>
                            </p>
                            <button class="btn btn-outline-success btn-chon-mon ${isSelected ? 'selected' : ''}"
                                    data-dish-id="${dish.dishId}"
                                    data-dish-name="${dish.dishName || 'Món ăn'}"
                                    data-price="${dish.price || 0}"
                                    data-images="${dish.images || ''}">
                                <i class="fas fa-${isSelected ? 'check' : 'plus'}"></i>
                                ${isSelected ? 'Đã chọn' : 'Chọn món'}
                            </button>
                        </div>
                    </div>
                `;

                container.appendChild(dishDiv);
            });

            console.log('Menu rendering completed');
        }

        // Utility methods
        showLoadingModal() {
            const modal = new bootstrap.Modal(this.elements.loadingModal);
            modal.show();
        }

            hideLoadingModal() {
                const modal = bootstrap.Modal.getInstance(this.elements.loadingModal);
                if (modal) {
                    modal.hide();
                }
            }

            formatCurrency(amount) {
                return new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                }).format(amount);
            }
        }

        // Global function for loading menu (called from HTML)
        function loadMenuForRegion(regionId) {
            if (window.bookingManager) {
                window.bookingManager.loadMenuForRegion(regionId);
            }
        }

        // Initialize the booking manager when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            window.bookingManager = new AdminRestaurantBookingManager();
        });
</script>