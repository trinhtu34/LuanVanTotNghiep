@model List<testpayment6._0.Areas.admin.Models.OrderTable_manage>

@if (Model != null && Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>ID Đơn</th>
                    <th>Người đặt</th>
                    <th>Thời gian đến</th>
                    <th>Ngày đặt</th>
                    <th>Tổng tiền</th>
                    <th>Tiền cọc</th>
                    <th>Trạng thái thanh toán cọc</th>
                    <th>Trạng thái thanh toán món ăn</th>
                    <th>Trạng thái đơn</th>
                    <th>Hành động</th>
                    <th>Chi tiết</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model)
                {
                    <tr>
                        <td>
                            <strong class="text-primary">#@order.OrderTableId</strong>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-user text-muted me-2"></i>
                                <span>@order.UserId</span>
                            </div>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-clock text-info me-2"></i>
                                <span class="text-info">
                                    @order.StartingTime.ToString("dd/MM/yyyy HH:mm")
                                </span>
                            </div>
                        </td>
                        <td>
                            <small class="text-muted">
                                <i class="fas fa-calendar-alt me-1"></i>
                                @order.OrderDate.ToString("dd/MM/yyyy HH:mm")
                            </small>
                        </td>
                        <td>
                            <strong class="text-success">
                                <i class="fas fa-money-bill-wave me-1"></i>
                                @order.TotalPrice.ToString("N0") VNĐ
                            </strong>
                        </td>
                        <td>
                            <span class="text-warning">
                                <i class="fas fa-hand-holding-usd me-1"></i>
                                @order.TotalDeposit.ToString("N0") VNĐ
                            </span>
                        </td>
                        <td>
                            @if (order.isPaidDeposit == true)
                            {
                                <span class="badge bg-success fs-6 px-3 py-2">
                                    <i class="fas fa-check-circle me-1"></i>
                                    Đã thanh toán
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger fs-6 px-3 py-2">
                                    <i class="fas fa-exclamation-circle me-1"></i>
                                    Chưa thanh toán
                                </span>
                            }
                        </td>
                        <td>
                            @if (order.isPaidTotalPrice == true)
                            {
                                <span class="badge bg-success fs-6 px-3 py-2">
                                    <i class="fas fa-check-circle me-1"></i>
                                    Đã thanh toán
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger fs-6 px-3 py-2">
                                    <i class="fas fa-exclamation-circle me-1"></i>
                                    Chưa thanh toán
                                </span>
                            }
                        </td>
                        <td>
                            @if (order.IsCancel)
                            {
                                <span class="badge bg-secondary fs-6 px-3 py-2">
                                    <i class="fas fa-times-circle me-1"></i>
                                    Đã hủy
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-primary fs-6 px-3 py-2">
                                    <i class="fas fa-check-circle me-1"></i>
                                    Hoạt động
                                </span>
                            }
                        </td>
                        <td>
                            <div class="d-grid gap-2">
                                @{
                                    var timeUntilStart = order.StartingTime - DateTime.Now;
                                    bool canCancel = !order.IsCancel && timeUntilStart.TotalHours > 0;
                                }
                                @if (canCancel)
                                {
                                    <button type="button" class="btn btn-danger btn-sm cancel-order-btn"
                                            data-order-id="@order.OrderTableId">
                                        <i class="fas fa-times me-1"></i>
                                        Hủy Đơn
                                    </button>
                                }
                                else if (!order.IsCancel)
                                {
                                    <button type="button" class="btn btn-secondary btn-sm" disabled>
                                        <i class="fas fa-ban me-1"></i>
                                        Đã qua giờ
                                    </button>
                                }
                                else
                                {
                                    <span class="text-muted small">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Đơn đã hủy
                                    </span>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="@Url.Action("Details", new { id = order.OrderTableId })"
                                   class="btn btn-sm btn-outline-info"
                                   title="Chi tiết đầy đủ"
                                   data-bs-toggle="tooltip">
                                    <i class="fas fa-info-circle"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Summary Section -->
    @* <div class="row mt-4">
        <div class="col-md-4">
            <div class="card border-0 bg-light">
                <div class="card-body text-center">
                    <i class="fas fa-list-alt fa-2x text-primary mb-2"></i>
                    <h5 class="card-title">Tổng đơn hàng</h5>
                    <p class="card-text fs-4 fw-bold text-primary">@Model.Count</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-0 bg-light">
                <div class="card-body text-center">
                    <i class="fas fa-chart-line fa-2x text-success mb-2"></i>
                    <h5 class="card-title">Tổng doanh thu</h5>
                    <p class="card-text fs-4 fw-bold text-success">
                        @Model.Sum(o => o.TotalPrice + o.TotalDeposit).ToString("N0") VNĐ
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-0 bg-light">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x text-info mb-2"></i>
                    <h5 class="card-title">Đã thanh toán</h5>
                    <p class="card-text fs-4 fw-bold text-info">
                        @Model.Count(o => o.IsPaid == true)
                    </p>
                </div>
            </div>
        </div>
    </div> *@
}
else
{
    <div class="text-center py-5">
        <div class="empty-state">
            <div class="mb-4">
                <i class="fas fa-table fa-4x text-muted mb-3"></i>
                <h3 class="text-muted">Không có đơn đặt bàn nào</h3>
                <p class="text-muted lead">Hiện tại không có đơn đặt bàn nào theo bộ lọc đã chọn.</p>
            </div>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>
                    Thêm đơn mới
                </button>
                <button class="btn btn-outline-secondary btn-lg">
                    <i class="fas fa-filter me-2"></i>
                    Bỏ lọc
                </button>
            </div>
        </div>
    </div>
}

<style>
    .table th {
        background-color: #343a40;
        color: white;
        font-weight: 600;
        border: none;
        padding: 15px 12px;
    }

    .table td {
        vertical-align: middle;
        padding: 12px;
        border-top: 1px solid #dee2e6;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
        transition: background-color 0.2s ease;
    }

    .badge {
        font-size: 0.85em;
        font-weight: 500;
        border-radius: 6px;
    }

    .btn-group .btn {
        border-radius: 6px;
        margin: 0 2px;
    }

    .cancel-order-btn {
        font-size: 0.875rem;
        padding: 6px 12px;
        border-radius: 6px;
        transition: all 0.2s ease;
    }

        .cancel-order-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

    .card {
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

        .card:hover {
            transform: translateY(-2px);
        }

    .empty-state {
        padding: 60px 20px;
        border-radius: 12px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {

    document.querySelectorAll('[data-bs-toggle="tooltip"]')
        .forEach(el => new bootstrap.Tooltip(el));

        // Handle cancel order button clicks
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('cancel-order-btn') || e.target.closest('.cancel-order-btn')) {
                const button = e.target.classList.contains('cancel-order-btn') ? e.target : e.target.closest('.cancel-order-btn');
                const orderTableId = button.getAttribute('data-order-id');
                handleCancelOrder(orderTableId);
            }
        });
    });

    // Hàm xử lý hủy đơn đặt bàn
    function handleCancelOrder(orderTableId) {
        // Hiển thị confirm dialog với SweetAlert nếu có, hoặc confirm thông thường
        const confirmResult = confirm('Bạn có chắc chắn muốn hủy đơn đặt bàn này không?\n\nLưu ý: Hành động này không thể hoàn tác.');

        if (!confirmResult) {
            return;
        }

        // Tìm button để thay đổi trạng thái
        const cancelButton = document.querySelector(`.cancel-order-btn[data-order-id="${orderTableId}"]`);

        if (cancelButton) {
            // Disable button và hiển thị loading
            cancelButton.disabled = true;
            cancelButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Đang hủy...';
            cancelButton.classList.add('disabled');
        }

        // Gửi request hủy đơn
        fetch('@Url.Action("CancelOrder", "OrdertableManage")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                OrderTableId: parseInt(orderTableId)
            })
        })
        .then(response => {
            console.log('Response status:', response.status);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(result => {
            console.log('Cancel order result:', result);

            if (result.success) {
                // Thành công
                alert('Hủy đơn thành công!');

                // Smooth reload hoặc update UI
                setTimeout(() => {
                    location.reload();
                }, 500);
            } else {
                // Thất bại
                alert('Lỗi: ' + (result.message || 'Không thể hủy đơn'));
                restoreButton(cancelButton);
            }
        })
        .catch(error => {
            console.error('Error canceling order:', error);
            alert('Có lỗi xảy ra khi hủy đơn: ' + error.message);
            restoreButton(cancelButton);
        });
    }

</script>