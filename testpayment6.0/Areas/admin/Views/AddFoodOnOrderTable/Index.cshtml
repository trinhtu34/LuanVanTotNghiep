@model testpayment6._0.Areas.admin.Models.OrderViewModel

@{
    ViewData["Title"] = "Đặt món ăn";
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <h2>Đặt món ăn</h2>

    @if (TempData["SuccessOrder"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessOrder"]
        </div>
    }

    @if (TempData["ErrorOrder"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorOrder"]
        </div>
    }

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger">
            @ViewBag.Error
        </div>
    }

    <form asp-action="CreateOrder" method="post" id="orderForm">
        @Html.AntiForgeryToken()

        <div class="row">
            <!-- Nhập mã đơn đặt bàn -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Thông tin đơn đặt bàn</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">Mã đơn đặt bàn <span class="text-danger">*</span></label>
                            <input type="text" id="orderTableId" name="orderTableId" class="form-control" placeholder="Nhập mã đơn đặt bàn" required>
                        </div>
                        <button type="button" class="btn btn-info" onclick="loadExistingOrder()">Tải thông tin đơn</button>

                        <!-- Hiển thị món ăn hiện tại của đơn -->
                        <div id="existingOrderSection" style="display: none;" class="mt-3">
                            <h6>Món ăn hiện tại trong đơn:</h6>
                            <div id="existingOrderList" class="existing-order-list">
                                <!-- Existing orders will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chọn khu vực và món ăn -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>Chọn món ăn</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label class="form-label">Chọn khu vực</label>
                            <select id="regionSelect" class="form-select">
                                <option value="">-- Chọn khu vực --</option>
                                @foreach (var region in Model.Regions)
                                {
                                    <option value="@region.RegionId">@region.RegionName</option>
                                }
                            </select>
                        </div>

                        <div id="menuSection" style="display: none;">
                            <h6>Danh sách món ăn</h6>
                            <div id="menuList" class="row">
                                @* menu load ở đây  *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Giỏ hàng -->
        <div class="row mt-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Giỏ hàng</h5>
                    </div>
                    <div class="card-body">
                        <div id="cartItems">
                            <p class="text-muted">Chưa có món ăn nào được chọn</p>
                        </div>
                        <div id="totalAmount" class="text-end">
                            <strong>Tổng tiền tính thêm: <span id="totalPrice">0</span> VNĐ</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <button type="submit" class="btn btn-primary btn-lg">Hoàn tất đặt món</button>
                <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg ms-2">Hủy</a>
            </div>
        </div>
    </form>
</div>

<style>
    .dish-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        transition: box-shadow 0.3s;
    }

        .dish-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .dish-image {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 5px;
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

        .cart-item:last-child {
            border-bottom: none;
        }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        border: 1px solid #ddd;
        background: white;
        cursor: pointer;
        border-radius: 4px;
    }

        .quantity-btn:hover {
            background: #f0f0f0;
        }

    .quantity-input {
        width: 60px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
    }

    .existing-order-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 10px;
    }

    .existing-order-item {
        padding: 8px;
        border-bottom: 1px solid #f0f0f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .existing-order-item:last-child {
            border-bottom: none;
        }
</style>

<script>
    let selectedDishes = [];
    let existingOrders = [];

    // Load menu when region changes
    document.getElementById('regionSelect').addEventListener('change', function() {
        const regionId = this.value;
        if (regionId) {
            loadMenuByRegion(regionId);
        } else {
            document.getElementById('menuSection').style.display = 'none';
        }
    });

    // Load existing order details
    function loadExistingOrder() {
        const orderTableId = document.getElementById('orderTableId').value.trim();
        if (!orderTableId) {
            alert('Vui lòng nhập mã đơn đặt bàn');
            return;
        }

        fetch(`/admin/AddFoodOnOrderTable/GetOrderFoodDetails?orderTableId=${orderTableId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    existingOrders = data.data;
                    displayExistingOrders(data.data);
                    document.getElementById('existingOrderSection').style.display = 'block';
                } else {
                    document.getElementById('existingOrderSection').style.display = 'none';
                    alert('Không tìm thấy thông tin đơn đặt bàn hoặc đơn chưa có món ăn nào');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tải thông tin đơn đặt bàn');
            });
    }

    function displayExistingOrders(orders) {
        const existingOrderList = document.getElementById('existingOrderList');

        if (orders.length === 0) {
            existingOrderList.innerHTML = '<p class="text-muted">Đơn này chưa có món ăn nào</p>';
            return;
        }

        let html = '';
        orders.forEach(order => {
            html += `
                <div class="existing-order-item">
                    <div>
                        <strong>Mã món: ${order.dishId}</strong><br>
                        <small>Số lượng: ${order.quantity} | Giá: ${formatCurrency(order.price)}</small>
                    </div>
                    <div>
                        <strong>${formatCurrency(order.price * order.quantity)}</strong>
                    </div>
                </div>
            `;
        });
        existingOrderList.innerHTML = html;
    }

    function loadMenuByRegion(regionId) {
        fetch(`/admin/AddFoodOnOrderTable/GetMenuByRegion?regionId=${regionId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayMenu(data.data);
                    document.getElementById('menuSection').style.display = 'block';
                } else {
                    alert('Không thể tải danh sách món ăn');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tải danh sách món ăn');
            });
    }

    function displayMenu(dishes) {
        const menuList = document.getElementById('menuList');
        menuList.innerHTML = '';

        dishes.forEach(dish => {
            const dishCard = document.createElement('div');
            dishCard.className = 'col-md-6 col-lg-4';
            dishCard.innerHTML = `
                <div class="dish-card">
                    <img src="${dish.images || '/images/no-image.jpg'}" alt="${dish.dishName}" class="dish-image">
                    <h6 class="mt-2">${dish.dishName}</h6>
                    <p class="text-muted">${dish.descriptions || ''}</p>
                    <p class="text-success"><strong>${formatCurrency(dish.price)}</strong></p>
                    <div class="quantity-controls">
                        <button type="button" class="quantity-btn" onclick="changeQuantity('${dish.dishId}', -1)">-</button>
                        <input type="number" class="quantity-input" id="qty_${dish.dishId}" value="0" min="0" onchange="updateQuantity('${dish.dishId}', this.value)">
                        <button type="button" class="quantity-btn" onclick="changeQuantity('${dish.dishId}', 1)">+</button>
                    </div>
                </div>
            `;
            menuList.appendChild(dishCard);
        });
    }

    function changeQuantity(dishId, change) {
        const qtyInput = document.getElementById(`qty_${dishId}`);
        const currentQty = parseInt(qtyInput.value) || 0;
        const newQty = Math.max(0, currentQty + change);
        qtyInput.value = newQty;
        updateQuantity(dishId, newQty);
    }

    function updateQuantity(dishId, quantity) {
        quantity = parseInt(quantity) || 0;

        // Find dish info
        const regionId = document.getElementById('regionSelect').value;
        fetch(`/admin/AddFoodOnOrderTable/GetMenuByRegion?regionId=${regionId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const dish = data.data.find(d => d.dishId === dishId);
                    if (dish) {
                        updateSelectedDishes(dish, quantity);
                        updateCart();
                    }
                }
            });
    }

    function updateSelectedDishes(dish, quantity) {
        const existingIndex = selectedDishes.findIndex(d => d.dishId === dish.dishId);

        if (quantity > 0) {
            if (existingIndex >= 0) {
                selectedDishes[existingIndex].quantity = quantity;
            } else {
                selectedDishes.push({
                    dishId: dish.dishId,
                    dishName: dish.dishName,
                    price: dish.price,
                    quantity: quantity
                });
            }
        } else {
            if (existingIndex >= 0) {
                selectedDishes.splice(existingIndex, 1);
            }
        }
    }

    function updateCart() {
        const cartItems = document.getElementById('cartItems');
        const totalPrice = document.getElementById('totalPrice');

        if (selectedDishes.length === 0) {
            cartItems.innerHTML = '<p class="text-muted">Chưa có món ăn nào được chọn</p>';
            totalPrice.textContent = '0';
            return;
        }

        let cartHtml = '';
        let total = 0;

        selectedDishes.forEach(dish => {
            const subtotal = dish.price * dish.quantity;
            total += subtotal;

            cartHtml += `
                <div class="cart-item">
                    <div>
                        <strong>${dish.dishName}</strong><br>
                        <small>${formatCurrency(dish.price)} x ${dish.quantity}</small>
                    </div>
                    <div>
                        <strong>${formatCurrency(subtotal)}</strong>
                    </div>
                </div>
            `;
        });

        cartItems.innerHTML = cartHtml;
        totalPrice.textContent = formatCurrency(total);
    }

    function formatCurrency(amount) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    }

    // Handle form submission
    document.getElementById('orderForm').addEventListener('submit', function(e) {
        const orderTableId = document.getElementById('orderTableId').value.trim();
        if (!orderTableId) {
            e.preventDefault();
            alert('Vui lòng nhập mã đơn đặt bàn');
            return;
        }

        if (selectedDishes.length === 0) {
            e.preventDefault();
            alert('Vui lòng chọn ít nhất một món ăn');
            return;
        }

        // Add hidden inputs for selected dishes
        selectedDishes.forEach((dish, index) => {
            const dishIdInput = document.createElement('input');
            dishIdInput.type = 'hidden';
            dishIdInput.name = 'dishIds';
            dishIdInput.value = dish.dishId;
            this.appendChild(dishIdInput);

            const quantityInput = document.createElement('input');
            quantityInput.type = 'hidden';
            quantityInput.name = 'quantities';
            quantityInput.value = dish.quantity;
            this.appendChild(quantityInput);

            const priceInput = document.createElement('input');
            priceInput.type = 'hidden';
            priceInput.name = 'prices';
            priceInput.value = dish.price;
            this.appendChild(priceInput);
        });
    });
</script>