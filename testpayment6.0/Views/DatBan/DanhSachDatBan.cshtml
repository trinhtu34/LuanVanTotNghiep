@model List<testpayment6._0.ResponseModels.OrderTableViewModel>
@{
	ViewData["Title"] = "Danh Sách Đặt Bàn";
}

<div class="container mt-4">
	<div class="d-flex justify-content-between align-items-center mb-4">
		<h2>Danh Sách Đặt Bàn Của Tôi</h2>
		<a href="@Url.Action("Index", "DatBan")" class="btn btn-success">
			<i class="fas fa-plus"></i> Đặt Bàn Mới
		</a>
	</div>

	@if (Model != null && Model.Any())
	{
		<div class="row">
			@foreach (var order in Model.OrderByDescending(o => o.OrderDate))
			{
				<div class="col-md-6 col-lg-4 mb-4">
					<div class="card order-card @(order.IsCancel ? "cancelled" : "")">
						<div class="card-header d-flex justify-content-between align-items-center">
							<h6 class="mb-0">
								<i class="fas fa-receipt"></i>
								Mã đơn: #@order.OrderTableId
							</h6>
							<span class="badge @(order.IsCancel ? "bg-danger" : "bg-success")">
								@(order.IsCancel ? "Đã hủy" : "Đang hoạt động")
							</span>
						</div>
						<div class="card-body">
							<div class="order-info">
								<p class="info-item">
									<i class="fas fa-calendar-alt text-primary"></i>
									<strong>Ngày đặt:</strong><br>
									<span class="ms-3">@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</span>
								</p>

								<p class="info-item">
									<i class="fas fa-clock text-warning"></i>
									<strong>Thời gian bắt đầu:</strong><br>
									<span class="ms-3">@order.StartingTime.ToString("dd/MM/yyyy HH:mm")</span>
								</p>

								<p class="info-item">
									<i class="fas fa-money-bill-wave text-success"></i>
									<strong>Tổng tiền:</strong><br>
									<span class="ms-3">@string.Format("{0:N0}", order.TotalPrice) VNĐ</span>
								</p>

								<p class="info-item">
									<i class="fas fa-coins text-warning"></i>
									<strong>Tiền cọc:</strong><br>
									<span class="ms-3">@string.Format("{0:N0}", order.TotalDeposit) VNĐ</span>
								</p>

								<!-- Trạng thái thanh toán tiền cọc -->
								<p class="info-item">
									<i class="fas fa-credit-card text-info"></i>
									<strong>Trạng thái thanh toán:</strong><br>
									<span class="ms-3 payment-status-placeholder" data-order-id="@order.OrderTableId">
										<span class="spinner-border spinner-border-sm" role="status"></span>
										Đang kiểm tra...
									</span>
								</p>

								<!-- Thông tin số bàn -->
								<p class="info-item">
									<i class="fas fa-utensils text-info"></i>
									<strong>Số bàn đã đặt:</strong><br>
									<span class="ms-3 table-count-placeholder" data-order-id="@order.OrderTableId">
										<span class="spinner-border spinner-border-sm" role="status"></span>
										Đang tải...
									</span>
								</p>
								<!-- Thông tin món ăn đã đặt -->
								<p class="info-item">
									<i class="fas fa-utensils text-success"></i>
									<strong>Món ăn đã đặt:</strong><br>
									<span class="ms-3 food-count-placeholder" data-order-id="@order.OrderTableId">
										<span class="spinner-border spinner-border-sm" role="status"></span>
										Đang tải...
									</span>
								</p>
							</div>
						</div>
						<div class="card-footer text-muted text-center">
							<small>
								@{
									var timeUntilStart = order.StartingTime - DateTime.Now;
									if (timeUntilStart.TotalHours > 0 && !order.IsCancel)
									{
										<span class="text-info">
											<i class="fas fa-hourglass-half"></i>
											Còn @Math.Round(timeUntilStart.TotalHours, 1) giờ nữa
										</span>
									}
									else if (!order.IsCancel && timeUntilStart.TotalHours <= 0 && timeUntilStart.TotalHours > -2)
									{
										<span class="text-warning">
											<i class="fas fa-exclamation-triangle"></i>
											Đã đến giờ
										</span>
									}
									else if (!order.IsCancel)
									{
										<span class="text-secondary">
											<i class="fas fa-check-circle"></i>
											Đã qua
										</span>
									}
									else
									{
										<span class="text-danger">
											<i class="fas fa-times-circle"></i>
											Đã hủy
										</span>
									}
								}
							</small>
						</div>
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<div class="text-center py-5">
			<div class="empty-state">
				<i class="fas fa-calendar-times fa-5x text-muted mb-3"></i>
				<h4 class="text-muted">Chưa có đơn đặt bàn nào</h4>
				<p class="text-muted">Bạn chưa đặt bàn lần nào. Hãy đặt bàn ngay để trải nghiệm dịch vụ của chúng tôi!</p>
				<a href="@Url.Action("Index", "DatBan")" class="btn btn-primary btn-lg">
					<i class="fas fa-plus"></i> Đặt Bàn Ngay
				</a>
			</div>
		</div>
	}
</div>

<style>
	.food-list {
		display: flex;
		flex-direction: column;
		gap: 5px;
	}

	.food-item {
		background-color: #e8f5e8;
		color: #2e7d32;
		padding: 4px 8px;
		border-radius: 12px;
		font-size: 0.8rem;
		font-weight: 500;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.food-quantity {
		background-color: #2e7d32;
		color: white;
		border-radius: 50%;
		width: 20px;
		height: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 0.7rem;
		margin-left: 5px;
	}

	/* Styles cho trạng thái thanh toán */
	.payment-status {
		padding: 4px 8px;
		border-radius: 12px;
		font-size: 0.8rem;
		font-weight: 500;
		display: inline-flex;
		align-items: center;
		gap: 5px;
	}

		.payment-status.paid {
			background-color: #d4edda;
			color: #155724;
			border: 1px solid #c3e6cb;
		}

		.payment-status.unpaid {
			background-color: #f8d7da;
			color: #721c24;
			border: 1px solid #f5c6cb;
		}

		.payment-status.error {
			background-color: #fff3cd;
			color: #856404;
			border: 1px solid #ffeaa7;
		}

	.order-card {
		border-radius: 10px;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		transition: all 0.3s ease;
	}

		.order-card:hover {
			box-shadow: 0 4px 8px rgba(0,0,0,0.15);
			transform: translateY(-2px);
		}

		.order-card.cancelled {
			opacity: 0.7;
			border-left: 4px solid #dc3545;
		}

	.info-item {
		margin-bottom: 15px;
		padding: 8px 0;
		border-bottom: 1px solid #eee;
	}

		.info-item:last-child {
			border-bottom: none;
		}

		.info-item i {
			width: 20px;
		}

	.btn-chi-tiet {
		transition: all 0.3s ease;
	}

		.btn-chi-tiet:hover {
			transform: scale(1.02);
		}

	.empty-state {
		max-width: 400px;
		margin: 0 auto;
	}

	.card-header {
		background: linear-gradient(45deg, #007bff, #0056b3);
		color: white;
	}

	.card-footer {
		background-color: #f8f9fa;
	}

	.table-count-placeholder {
		font-size: 0.9rem;
	}

	.table-list {
		display: flex;
		flex-wrap: wrap;
		gap: 5px;
	}

	.table-badge {
		background-color: #e3f2fd;
		color: #1976d2;
		padding: 4px 8px;
		border-radius: 12px;
		font-size: 0.8rem;
		font-weight: 500;
	}

	.table-summary {
		background-color: #f8f9fa;
		padding: 15px;
		border-radius: 8px;
		margin-bottom: 20px;
		border-left: 4px solid #007bff;
	}

	.table-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
		gap: 15px;
	}

	.table-detail-card {
		border: 1px solid #e0e0e0;
		border-radius: 8px;
		padding: 15px;
		text-align: center;
		background: #f8f9fa;
		transition: all 0.3s ease;
	}

		.table-detail-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 4px 8px rgba(0,0,0,0.1);
		}

	@@media (max-width: 768px) {
		.order-card

	{
		margin-bottom: 20px;
	}

	.info-item {
		padding: 5px 0;
	}

	.table-grid {
		grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
	}

	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		// Tải tất cả thông tin cho mỗi đơn
		loadTableCounts();
		loadPaymentStatus();

		// Xử lý click xem chi tiết
		document.querySelectorAll('.btn-chi-tiet').forEach(function(button) {
			button.addEventListener('click', function() {
				const orderTableId = this.getAttribute('data-order-id');
				showOrderDetails(orderTableId);
			});
		});
	});

	// Hàm tải trạng thái thanh toán
	function loadPaymentStatus() {
		document.querySelectorAll('.payment-status-placeholder').forEach(function(element) {
			const orderTableId = element.getAttribute('data-order-id');

			fetch(`@Url.Action("GetPaymentStatus", "DatBan")?orderTableId=${orderTableId}`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				}
			})
			.then(response => {
				console.log(`Payment status response for order ${orderTableId}:`, response.status);
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				return response.json();
			})
			.then(result => {
				console.log(`Payment status result for order ${orderTableId}:`, result);

				if (result.success && result.data) {
					const isPaid = result.data.isPaid;
					console.log(`Order ${orderTableId} - isPaid:`, isPaid);

					if (isPaid === true) {
						element.innerHTML = `
							<span class="payment-status paid">
								<i class="fas fa-check-circle"></i>
								Đã thanh toán
							</span>
						`;
					} else if (isPaid === false) {
						element.innerHTML = `
							<span class="payment-status unpaid">
								<i class="fas fa-exclamation-circle"></i>
								Chưa thanh toán
							</span>
						`;
					} else {
						console.log(`Order ${orderTableId} - isPaid is neither true nor false:`, isPaid, typeof isPaid);
						element.innerHTML = `
							<span class="payment-status error">
								<i class="fas fa-question-circle"></i>
								Không xác định (${isPaid})
							</span>
						`;
					}
				} else {
					console.log(`Order ${orderTableId} - result.success:`, result.success, 'result.data:', result.data);
					element.innerHTML = `
						<span class="payment-status error">
							<i class="fas fa-question-circle"></i>
							Không xác định
						</span>
					`;
				}
			})
			.catch(error => {
				console.error('Error loading payment status for order', orderTableId, ':', error);
				element.innerHTML = `
					<span class="payment-status error">
						<i class="fas fa-exclamation-triangle"></i>
						Lỗi tải dữ liệu
					</span>
				`;
			});
		});
	}

	// lấy số lượng bàn , lấy từ phương thức bên controller
	function loadTableCounts() {
		document.querySelectorAll('.table-count-placeholder').forEach(function(element)
		{
			const orderTableId = element.getAttribute('data-order-id');

			// Gọi API thông qua Controller , ko gọi từ frontend được vì là API Gateway không cho gọi
			fetch(`@Url.Action("GetOrderTableDetails", "DatBan")?orderTableId=${orderTableId}`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				}
			})
			.then(response => {
				console.log('Response status:', response.status);
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				return response.json();
			})
			.then(result => {
				console.log('Controller response:', result);

				if (result.success && result.data && result.data.length > 0) {
					const tableCount = result.data.length;
					const tableIds = result.data.map(item => item.tableId).sort((a, b) => a - b);

					// Hiển thị số lượng và danh sách bàn
					element.innerHTML = `
						<span class="fw-bold">${tableCount} bàn</span><br>
						<div class="table-list mt-1">
							${tableIds.map(id => `<span class="table-badge">Bàn ${id}</span>`).join('')}
						</div>
					`;
				} else {
					element.innerHTML = '<span class="text-muted">Không có bàn</span>';
				}
			})
			.catch(error => {
				console.error('Error loading table count:', error);
				element.innerHTML = '<span class="text-danger">Lỗi tải dữ liệu</span>';
			});
		});
			// Tải danh sách món ăn cho mỗi đơn
		document.querySelectorAll('.food-count-placeholder').forEach(function(element)
		{
			const orderTableId = element.getAttribute('data-order-id');

			fetch(`@Url.Action("GetOrderFoodDetails", "DatBan")?orderTableId=${orderTableId}`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				}
			})
			.then(response => {
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				return response.json();
			})
			.then(result => {
				if (result.success && result.data && result.data.length > 0) {
					const foodCount = result.data.length;

					// Hiển thị số lượng và danh sách món ăn
					element.innerHTML = `
						<span class="fw-bold">${foodCount} món</span><br>
						<div class="food-list mt-1">
							${result.data.map(food => `
								<div class="food-item">
									<span>${food.dishName}</span>
									<span class="food-quantity">${food.quantity}</span>
								</div>
							`).join('')}
						</div>
					`;
				} else {
					element.innerHTML = '<span class="text-muted">Chưa đặt món</span>';
				}
			})
			.catch(error => {
				console.error('Error loading food details:', error);
				element.innerHTML = '<span class="text-danger">Lỗi tải dữ liệu</span>';
			});
		});
	}

</script>