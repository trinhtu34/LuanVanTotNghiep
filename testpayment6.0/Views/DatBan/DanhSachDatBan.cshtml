@model List<testpayment6._0.ResponseModels.OrderTableViewModel>
@{
    ViewData["Title"] = "Danh Sách Đặt Bàn";
}
@if (TempData["ErrorDSDB"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorDSDB"]
    </div>
}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Danh Sách Đặt Bàn Của Tôi</h2>
        <a href="@Url.Action("Index", "DatBan")" class="btn btn-success">
            <i class="fas fa-plus"></i> Đặt Bàn Mới
        </a>
    </div>

    <!--Section thống kê được cập nhật -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card statistics-card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie"></i> Thống Kê Tổng Quan
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3 col-sm-6">
                            <div class="stat-item total">
                                <div class="stat-value" id="totalOrderCount">
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span class="ms-2">Đang tải...</span>
                                </div>
                                <div class="stat-label">
                                    <i class="fas fa-clipboard-list text-primary"></i>
                                    Tổng Số Đơn
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <div class="stat-item paid">
                                <div class="stat-value" id="paidOrderCount">
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span class="ms-2">Đang tải...</span>
                                </div>
                                <div class="stat-label">
                                    <i class="fas fa-check-circle text-success"></i>
                                    Đã Thanh Toán
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <div class="stat-item unpaid">
                                <div class="stat-value" id="unpaidOrderCount">
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span class="ms-2">Đang tải...</span>
                                </div>
                                <div class="stat-label">
                                    <i class="fas fa-exclamation-circle text-warning"></i>
                                    Chưa Thanh Toán
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <div class="stat-item canceled">
                                <div class="stat-value" id="canceled">
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span class="ms-2">Đang tải...</span>
                                </div>
                                <div class="stat-label">
                                    <i class="fas fa-times-circle text-danger"></i>
                                    Đã Bị Hủy
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="row">
            @foreach (var order in Model.OrderByDescending(o => o.orderDate))
            {
                @* var timeUntilStart = order.startingTime - DateTime.Now; *@
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card order-card @(order.isCancel ? "cancelled" : "")">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-receipt"></i>
                                Mã đơn: #@order.orderTableId
                            </h6>
                            <span class="badge @(order.isCancel ? "bg-danger" : "bg-success")">
                                @(order.isCancel ? "Đã hủy" : "Đang hoạt động")
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="order-info">
                                <p class="info-item">
                                    <i class="fas fa-calendar-alt text-primary"></i>
                                    <strong>Ngày đặt:</strong><br>
                                    <span class="ms-3">@order.orderDate.ToString("dd/MM/yyyy HH:mm")</span>
                                </p>

                                <p class="info-item">
                                    <i class="fas fa-clock text-warning"></i>
                                    <strong>Thời gian bắt đầu:</strong><br>
                                    <span class="ms-3">@order.startingTime.ToString("dd/MM/yyyy HH:mm")</span>
                                </p>

                                <p class="info-item">
                                    <i class="fas fa-money-bill-wave text-success"></i>
                                    <strong>Tổng tiền:</strong><br>
                                    <span class="ms-3">@string.Format("{0:N0}", order.totalPrice) VNĐ</span>
                                </p>

                                <p class="info-item">
                                    <i class="fas fa-coins text-warning"></i>
                                    <strong>Tiền cọc:</strong><br>
                                    <span class="ms-3">@string.Format("{0:N0}", order.totalDeposit) VNĐ</span>
                                </p>
                                <!-- Trạng thái thanh toán tiền cọc -->
                                <p class="info-item">
                                    <i class="fas fa-credit-card text-info"></i>
                                    <strong>Trạng thái thanh toán:</strong><br>
                                    <span class="ms-3">
                                        @if (order.IsPaid)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check"></i> Đã thanh toán
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">
                                                <i class="fas fa-clock"></i> Chưa thanh toán
                                            </span>
                                        }
                                    </span>
                                </p>

                                <!-- Button thanh toán - chỉ hiện khi chưa thanh toán -->
                                @if (!order.IsPaid)
                                {
                                    <div class="payment-button-container">
                                        <button type="button" class="btn btn-warning btn-sm w-100 payment-btn"
                                                data-order-id="@order.orderTableId"
                                                data-deposit="@order.totalDeposit">
                                            <i class="fas fa-credit-card"></i> Thanh Toán Tiền Cọc
                                        </button>
                                    </div>
                                }

                                <!-- Thông tin số bàn -->
                                <p class="info-item">
                                    <i class="fas fa-utensils text-info"></i>
                                    <strong>Số bàn đã đặt:</strong><br>
                                    <span class="ms-3 table-count-placeholder" data-order-id="@order.orderTableId">
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                        Đang tải...
                                    </span>
                                </p>
                                <!-- Thông tin món ăn đã đặt -->
                                <p class="info-item">
                                    <i class="fas fa-utensils text-success"></i>
                                    <strong>Món ăn đã đặt:</strong><br>
                                    <span class="ms-3 food-count-placeholder" data-order-id="@order.orderTableId">
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                        Đang tải...
                                    </span>
                                </p>
                                <!-- Hủy đơn đặt bàn -->
                                <div class="info-item">
                                    @{
                                        var timeUntilStart = order.startingTime - DateTime.Now;
                                        bool canCancel = !order.isCancel && timeUntilStart.TotalHours > 0;
                                    }
                                    @if (canCancel)
                                    {
                                        <button type="button" class="btn btn-danger btn-sm w-100 cancel-order-btn"
                                                data-order-id="@order.orderTableId">
                                            <i class="fas fa-times"></i> Hủy Đơn Đặt Bàn
                                        </button>
                                    }
                                    else if (!order.isCancel)
                                    {
                                        <button type="button" class="btn btn-secondary btn-sm w-100" disabled>
                                            <i class="fas fa-ban"></i> Không thể hủy (Đã qua giờ)
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-muted text-center">
                            <small>
                                @{
                                    if (timeUntilStart.TotalHours > 0 && !order.isCancel)
                                    {
                                        <span class="text-info">
                                            <i class="fas fa-hourglass-half"></i>
                                            Còn @Math.Round(timeUntilStart.TotalHours, 1) giờ nữa
                                        </span>
                                    }
                                    else if (!order.isCancel && timeUntilStart.TotalHours <= 0 && timeUntilStart.TotalHours > -2)
                                    {
                                        <span class="text-warning">
                                            <i class="fas fa-exclamation-triangle"></i>
                                            Đã đến giờ
                                        </span>
                                    }
                                    else if (!order.isCancel)
                                    {
                                        <span class="text-secondary">
                                            <i class="fas fa-check-circle"></i>
                                            Đã qua
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">
                                            <i class="fas fa-times-circle"></i>
                                            Đã hủy
                                        </span>
                                    }
                                }
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="fas fa-calendar-times fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">Chưa có đơn đặt bàn nào</h4>
                <p class="text-muted">Bạn chưa đặt bàn lần nào. Hãy đặt bàn ngay để trải nghiệm dịch vụ của chúng tôi!</p>
                <a href="@Url.Action("Index", "DatBan")" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus"></i> Đặt Bàn Ngay
                </a>
            </div>
        </div>
    }
</div>

<style>
    .food-list {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .food-item {
        background-color: #e8f5e8;
        color: #2e7d32;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .food-quantity {
        background-color: #2e7d32;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        margin-left: 5px;
    }

    /* Styles cho trạng thái thanh toán */
    .payment-status {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .payment-status.paid {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .payment-status.unpaid {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .payment-status.error {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

    /* Styles cho button thanh toán */
    .payment-button-container {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .payment-btn {
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .payment-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .payment-btn:active {
            transform: translateY(0);
        }

    .order-card {
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

        .order-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

        .order-card.cancelled {
            opacity: 0.7;
            border-left: 4px solid #dc3545;
        }

    .info-item {
        margin-bottom: 15px;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

        .info-item:last-child {
            border-bottom: none;
        }

        .info-item i {
            width: 20px;
        }

    .empty-state {
        max-width: 400px;
        margin: 0 auto;
    }

    .card-header {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
    }

    .card-footer {
        background-color: #f8f9fa;
    }

    .table-count-placeholder {
        font-size: 0.9rem;
    }

    .table-list {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }

    .table-badge {
        background-color: #e3f2fd;
        color: #1976d2;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .table-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 15px;
    }

    @@media (max-width: 768px) {
        .order-card {
            margin-bottom: 20px;
        }

        .info-item {
            padding: 5px 0;
        }

        .table-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }
    }

    .cancel-order-btn {
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .cancel-order-btn:hover {
            background-color: #c82333;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .cancel-order-btn:active {
            transform: translateY(0);
        }

    @* css cho phần thống kê  *@
    .statistics-card {
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin-bottom: 30px;
        border: none;
        overflow: hidden;
    }

    .statistics-card .card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px 15px 0 0;
        border: none;
        padding: 20px;
    }

        .statistics-card .card-header h5 {
            margin: 0;
            font-weight: 600;
            font-size: 1.3rem;
        }

        .statistics-card .card-header i {
            margin-right: 10px;
            font-size: 1.2rem;
        }

    .stat-item {
        padding: 25px 15px;
        border-radius: 12px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        margin: 10px 5px;
        transition: all 0.4s ease;
        border: 1px solid #dee2e6;
        position: relative;
        overflow: hidden;
    }

        .stat-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .stat-item:hover::before {
            transform: scaleX(1);
        }

        .stat-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }

    .stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stat-label {
        font-size: 0.95rem;
        color: #6c757d;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .stat-label i {
            margin-right: 8px;
            font-size: 1.1rem;
        }

    /* Màu sắc cho từng loại thống kê */
    .stat-item.total .stat-value {
        color: #3498db;
    }

    .stat-item.paid .stat-value {
        color: #27ae60;
    }

    .stat-item.unpaid .stat-value {
        color: #f39c12;
    }

    .stat-item.canceled .stat-value {
        color: #e74c3c;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .stat-value {
            font-size: 2rem;
        }

        .stat-item {
            margin-bottom: 15px;
            padding: 20px 10px;
        }

        .statistics-card .card-header {
            padding: 15px;
        }
    }

    @@media (max-width: 576px) {
        .stat-value {
            font-size: 1.8rem;
        }
    }

    /* Animation khi load */
    .stat-item {
        animation: fadeInUp 0.6s ease forwards;
        opacity: 0;
        transform: translateY(20px);
    }

        .stat-item:nth-child(1) {
            animation-delay: 0.1s;
        }

        .stat-item:nth-child(2) {
            animation-delay: 0.2s;
        }

        .stat-item:nth-child(3) {
            animation-delay: 0.3s;
        }

        .stat-item:nth-child(4) {
            animation-delay: 0.4s;
        }

    @@keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function()
    {
        // Tải tất cả thông tin cho mỗi đơn
        loadTableCounts();
        loadOrderStatistics();

        // Xử lý click button thanh toán
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('payment-btn') || e.target.closest('.payment-btn')) {
                const button = e.target.classList.contains('payment-btn') ? e.target : e.target.closest('.payment-btn');
                const orderTableId = button.getAttribute('data-order-id');
                const depositAmount = button.getAttribute('data-deposit');

                handlePaymentClick(orderTableId, depositAmount);
            }
        });
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('cancel-order-btn') || e.target.closest('.cancel-order-btn')) {
                const button = e.target.classList.contains('cancel-order-btn') ? e.target : e.target.closest('.cancel-order-btn');
                const orderTableId = button.getAttribute('data-order-id');

                handleCancelOrder(orderTableId);
            }
        });
    } );
    // load dashboard thống kê số liệu
    function loadOrderStatistics() {
        // Gọi API để lấy thống kê
        fetch('@Url.Action("GetOrderStatistics", "DatBan")', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(result => {
            console.log('Statistics result:', result);

            if (result.success && result.data) {
                // Cập nhật tổng số đơn
                document.getElementById('totalOrderCount').innerHTML =
                    `<span class="text-primary">${result.data.total}</span>`;

                // Cập nhật số đơn đã thanh toán
                document.getElementById('paidOrderCount').innerHTML =
                    `<span class="text-success">${result.data.paid}</span>`;

                // Cập nhật số đơn chưa thanh toán
                document.getElementById('unpaidOrderCount').innerHTML =
                    `<span class="text-warning">${result.data.unpaid}</span>`;

                // Cập nhật số đơn đã bị hủy
                document.getElementById('canceled').innerHTML =
                    `<span class="text-warning">${result.data.canceled}</span>`;
            } else {
                // Hiển thị lỗi
                document.getElementById('totalOrderCount').innerHTML =
                    '<span class="text-danger">Lỗi</span>';
                document.getElementById('paidOrderCount').innerHTML =
                    '<span class="text-danger">Lỗi</span>';
                document.getElementById('unpaidOrderCount').innerHTML =
                    '<span class="text-danger">Lỗi</span>';
                document.getElementById('canceled').innerHTML =
                    '<span class="text-danger">Lỗi</span>';
            }
        })
        .catch(error => {
            console.error('Error loading statistics:', error);

            // Hiển thị lỗi cho tất cả các thống kê
            document.getElementById('totalOrderCount').innerHTML =
                '<span class="text-danger">Lỗi tải</span>';
            document.getElementById('paidOrderCount').innerHTML =
                '<span class="text-danger">Lỗi tải</span>';
            document.getElementById('unpaidOrderCount').innerHTML =
                '<span class="text-danger">Lỗi tải</span>';
        });
    }
    // Hàm xử lý hủy đơn đặt bàn
    function handleCancelOrder(orderTableId) {
        // Hiển thị confirm dialog
        if (!confirm('Bạn có chắc chắn muốn hủy đơn đặt bàn này không?')) {
            return;
        }

        // Tìm button để thay đổi trạng thái
        const cancelButton = document.querySelector(`.cancel-order-btn[data-order-id="${orderTableId}"]`);

        if (cancelButton) {
            // Disable button và hiển thị loading
            cancelButton.disabled = true;
            cancelButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Đang hủy...';
        }

        // Gửi request hủy đơn
        fetch('@Url.Action("CancelOrder", "DatBan")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                OrderTableId: parseInt(orderTableId)
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(result => {
            console.log('Cancel order result:', result);

            if (result.success) {
                // Thành công - reload trang để cập nhật UI
                alert('Hủy đơn thành công!');
                location.reload();
            } else {
                // Thất bại
                alert('Lỗi: ' + (result.message || 'Không thể hủy đơn'));

                // Restore button
                if (cancelButton) {
                    cancelButton.disabled = false;
                    cancelButton.innerHTML = '<i class="fas fa-times"></i> Hủy Đơn Đặt Bàn';
                }
            }
        })
        .catch(error => {
            console.error('Error canceling order:', error);
            alert('Có lỗi xảy ra khi hủy đơn: ' + error.message);

            // Restore button
            if (cancelButton) {
                cancelButton.disabled = false;
                cancelButton.innerHTML = '<i class="fas fa-times"></i> Hủy Đơn Đặt Bàn';
            }
        });
    }
    // Hàm xử lý khi click button thanh toán
    function handlePaymentClick(orderTableId, depositAmount) {
        // Tạo form ẩn để gửi dữ liệu đến trang thanh toán
        const form = document.createElement("form");
        form.method = "POST";
        form.action = "/Payment/Index";

        // Thêm các trường dữ liệu
        const amountInput = document.createElement("input");
        amountInput.type = "hidden";
        amountInput.name = "Amount";
        amountInput.value = depositAmount;
        form.appendChild(amountInput);

        const descriptionInput = document.createElement("input");
        descriptionInput.type = "hidden";
        descriptionInput.name = "Description";
        descriptionInput.value = `Thanh toán cọc đặt bàn - Mã đơn #${orderTableId}`;
        form.appendChild(descriptionInput);

        const orderIdInput = document.createElement("input");
        orderIdInput.type = "hidden";
        orderIdInput.name = "OrderTableId";
        orderIdInput.value = orderTableId;
        form.appendChild(orderIdInput);

        // Thêm anti-forgery token nếu có
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        if (token) {
            const tokenInput = document.createElement("input");
            tokenInput.type = "hidden";
            tokenInput.name = "__RequestVerificationToken";
            tokenInput.value = token;
            form.appendChild(tokenInput);
        }

        document.body.appendChild(form);
        form.submit();
    }

    // lấy số lượng bàn , lấy từ phương thức bên controller
    function loadTableCounts() {
        document.querySelectorAll('.table-count-placeholder').forEach(function(element)
        {
            const orderTableId = element.getAttribute('data-order-id');

            // Gọi API thông qua Controller , ko gọi từ frontend được vì là API Gateway không cho gọi
            fetch(`@Url.Action("GetOrderTableDetails", "DatBan")?orderTableId=${orderTableId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                console.log('Controller response:', result);

                if (result.success && result.data && result.data.length > 0) {
                    const tableCount = result.data.length;
                    const tableIds = result.data.map(item => item.tableId).sort((a, b) => a - b);

                    // Hiển thị số lượng và danh sách bàn
                    element.innerHTML = `
                        <span class="fw-bold">${tableCount} bàn</span><br>
                        <div class="table-list mt-1">
                            ${tableIds.map(id => `<span class="table-badge">Bàn ${id}</span>`).join('')}
                        </div>
                    `;
                } else {
                    element.innerHTML = '<span class="text-muted">Không có bàn</span>';
                }
            })
            .catch(error => {
                console.error('Error loading table count:', error);
                element.innerHTML = '<span class="text-danger">Lỗi tải dữ liệu</span>';
            });
        });
            // Tải danh sách món ăn cho mỗi đơn
        document.querySelectorAll('.food-count-placeholder').forEach(function(element)
        {
            const orderTableId = element.getAttribute('data-order-id');

            fetch(`@Url.Action("GetOrderFoodDetails", "DatBan")?orderTableId=${orderTableId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success && result.data && result.data.length > 0) {
                    const foodCount = result.data.length;

                    // Hiển thị số lượng và danh sách món ăn
                    element.innerHTML = `
                        <span class="fw-bold">${foodCount} món</span><br>
                        <div class="food-list mt-1">
                            ${result.data.map(food => `
                                <div class="food-item">
                                    <span>${food.dishName}</span>
                                    <span class="food-quantity">${food.quantity}</span>
                                </div>
                            `).join('')}
                        </div>
                    `;
                } else {
                    element.innerHTML = '<span class="text-muted">Chưa đặt món</span>';
                }
            })
            .catch(error => {
                console.error('Error loading food details:', error);
                element.innerHTML = '<span class="text-danger">Lỗi tải dữ liệu</span>';
            });
        });
    }
</script>