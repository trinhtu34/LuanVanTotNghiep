{
  "StartAt": "Parse Artifact",
  "States": {
    "Parse Artifact": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-parse-artifact-from-CodeBuild",
        "Payload.$": "$"
      },
      "ResultSelector": {
        "TASK_FAMILY.$": "$.Payload.TASK_FAMILY",
        "ECS_CLUSTER.$": "$.Payload.ECS_CLUSTER",
        "CONTAINER_NAME.$": "$.Payload.CONTAINER_NAME",
        "LISTENER_ARN.$": "$.Payload.LISTENER_ARN"
      },
      "ResultPath": "$.parseartifact",
      "Next": "Register ECS Task Definition"
    },
    "Register ECS Task Definition": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-register-new-task-definition",
        "Payload": {
          "imageUri.$": "$.imageUri",
          "CONTAINER_NAME.$": "$.parseartifact.CONTAINER_NAME",
          "TASK_FAMILY.$": "$.parseartifact.TASK_FAMILY"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "oldTaskDefinitionArn.$": "$.Payload.oldTaskDefinitionArn",
        "newTaskDefinitionArn.$": "$.Payload.newTaskDefinitionArn"
      },
      "ResultPath": "$.registertaskdef",
      "Next": "Scale in new ECS Service"
    },
    "Scale in new ECS Service": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:create-new-ecs-service-from-new-task-definition",
        "Payload": {
          "newTaskDefinitionArn.$": "$.registertaskdef.newTaskDefinitionArn",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER",
          "BASE_SERVICE.$": "$.BASE_SERVICE"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "activeService.$": "$.Payload.activeService",
        "updatedService.$": "$.Payload.updatedService",
        "taskDefinitionArn.$": "$.Payload.taskDefinitionArn",
        "targetGroupArn.$": "$.Payload.targetGroupArn"
      },
      "ResultPath": "$.updateservice",
      "Next": "WaitBeforeHealthCheck"
    },
    "WaitBeforeHealthCheck": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Blue Green"
    },
    "Check Blue Green": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-check-blue-green",
        "Payload": {
          "listener_arn.$": "$.parseartifact.LISTENER_ARN"
        }
      },
      "ResultSelector": {
        "current_prod.$": "$.Payload.current_prod",
        "next_deploy.$": "$.Payload.next_deploy"
      },
      "ResultPath": "$.checkbluegreen",
      "Next": "Poll Target Health"
    },
    "Poll Target Health": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-poll-target-health",
        "Payload": {
          "TargetGroupArn.$": "$.checkbluegreen.next_deploy"
        }
      },
      "ResultSelector": {
        "isHealthy.$": "$.Payload.isHealthy",
        "status.$": "$.Payload.status"
      },
      "ResultPath": "$.polltargethealth",
      "Next": "Check Health Result"
    },
    "Check Health Result": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.polltargethealth.isHealthy",
          "BooleanEquals": true,
          "Next": "switch traffic from 0 to 25"
        },
        {
          "Variable": "$.polltargethealth.status",
          "StringEquals": "IN_PROGRESS",
          "Next": "WaitBeforeHealthCheck"
        }
      ],
      "Default": "Rollback Deployment when health check false"
    },
    "switch traffic from 0 to 25": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload": {
          "listener_arn.$": "$.parseartifact.LISTENER_ARN",
          "current_prod.$": "$.checkbluegreen.current_prod",
          "next_deploy.$": "$.checkbluegreen.next_deploy",
          "WeightProd": 75,
          "WeightNext": 25
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait after switch traffic by 25%"
    },
    "Wait after switch traffic by 25%": {
      "Type": "Wait",
      "Next": "GetAlarmForNextDeploy after 25%",
      "Seconds": 60
    },
    "GetAlarmForNextDeploy after 25%": {
      "Type": "Pass",
      "Parameters": {
        "AlarmName.$": "States.Format('{}-Alarm', States.ArrayGetItem(States.StringSplit($.checkbluegreen.next_deploy, '/'), 1))"
      },
      "ResultPath": "$.alarm",
      "Next": "Check CloudWatch after 25%"
    },
    "Check CloudWatch after 25%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Parameters": {
        "AlarmNames.$": "$.alarm.AlarmName"
      },
      "ResultPath": "$.alarmStatus25",
      "Next": "Wait after check CloudWatch to switch 25% traffic"
    },
    "Wait after check CloudWatch to switch 25% traffic": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Choice after monitor metric after switch traffic by 25%"
    },
    "Choice after monitor metric after switch traffic by 25%": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "switch from 25 to 50"
        }
      ],
      "Default": "switch from 25 to 0"
    },
    "switch from 25 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload.$": "$"
      },
      "Next": "Scale in ECS service errored by 25%"
    },
    "Scale in ECS service errored by 25%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 25 to 50": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload.$": "$"
      },
      "Next": "Wait after switch traffic by 50%"
    },
    "Wait after switch traffic by 50%": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 50%"
    },
    "Check CloudWatch after 50%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Parameters": {
        "AlarmNames.$": "$.alarm.AlarmName"
      },
      "ResultPath": "$.alarmStatus50",
      "Next": "Wait after check CloudWatch to switch 50% traffic"
    },
    "Wait after check CloudWatch to switch 50% traffic": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Choice after monitor metric after switch traffic by 50%"
    },
    "Choice after monitor metric after switch traffic by 50%": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "switch from 50 to 75"
        }
      ],
      "Default": "switch from 50 to 0"
    },
    "switch from 50 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload.$": "$"
      },
      "Next": "Scale in ECS service errored by 50%"
    },
    "Scale in ECS service errored by 50%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 50 to 75": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload.$": "$"
      },
      "Next": "Wait after switch traffic by 75%"
    },
    "Wait after switch traffic by 75%": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 75%"
    },
    "Check CloudWatch after 75%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Parameters": {
        "AlarmNames.$": "$.alarm.AlarmName"
      },
      "ResultPath": "$.alarmStatus75",
      "Next": "Wait after check CloudWatch to switch 75% traffic"
    },
    "Wait after check CloudWatch to switch 75% traffic": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Choice after monitor metric after switch traffic by 75%"
    },
    "Choice after monitor metric after switch traffic by 75%": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "Manual Approval"
        }
      ],
      "Default": "switch from 75 to 0"
    },
    "Manual Approval": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:request-to-slack-for-manual-approval",
        "Payload": {
          "TaskToken.$": "$.Task.Token"
        }
      },
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.approved",
          "BooleanEquals": true,
          "Next": "Send message to DevOps if switch traffic is not Approved"
        },
        {
          "Variable": "$.approved",
          "BooleanEquals": false,
          "Next": "Send message to DevOps if switch traffic Approved"
        }
      ]
    },
    "Send message to DevOps if switch traffic Approved": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "arn:aws:sns:ap-southeast-1:730335485777:Learn-SNS"
      },
      "Next": "switch from 75 to 100%"
    },
    "Send message to DevOps if switch traffic is not Approved": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "arn:aws:sns:ap-southeast-1:730335485777:Learn-SNS"
      },
      "Next": "switch from 75 to 0"
    },
    "switch from 75 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:ws-canary-switch-traffic",
        "Payload.$": "$"
      },
      "Next": "Scale in ECS service errored by 75%"
    },
    "Scale in ECS service errored by 75%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 75 to 100%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait after switch traffic by 100%"
    },
    "Wait after switch traffic by 100%": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 100%"
    },
    "Check CloudWatch after 100%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Parameters": {
        "AlarmNames.$": "$.alarm.AlarmName"
      },
      "ResultPath": "$.alarmStatus100",
      "Next": "Wait after check CloudWatch to switch 100% traffic"
    },
    "Wait after check CloudWatch to switch 100% traffic": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Choice after monitor metric after switch traffic by 100%"
    },
    "Choice after monitor metric after switch traffic by 100%": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "Wait before Scale in Old ECS service"
        }
      ],
      "Default": "switch from 100 to 0"
    },
    "Wait before Scale in Old ECS service": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Scale in old ECS Service when Switch traffic success"
    },
    "switch from 100 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Next": "Scale in ECS service errored by 100%"
    },
    "Scale in ECS service errored by 100%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "Scale in old ECS Service when Switch traffic success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "oldServiceName.$": "$.updateservice.activeService",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "service.$": "$.Payload.service"
      },
      "ResultPath": "$.scaleinoldservice",
      "End": true
    },
    "Rollback Deployment when health check false": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "oldTaskDefinitionArn.$": "$.updateservice.updatedService",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
        }
      },
      "End": true
    }
  }
}