// container health check , nhưng project của mình không có nên không dùng 
// "healthCheck": {
//   "command": ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"],
//   "interval": 30,
//   "timeout": 5,
//   "retries": 3,
//   "startPeriod": 10
// }


{
    "StartAt": "Parse Artifact",
    "States": {
      "Parse Artifact": { ... },
      "Register ECS Task Definition": { ... },
      "Update ECS Service": { ... },
      "WaitBeforeHealthCheck": { "Type": "Wait", "Seconds": 30, "Next": "Check Blue Green" },
      "Check Blue Green": { ... },
      "Poll Target Health": { ... },
  
      "Check Health Result": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.polltargethealth.isHealthy",
            "BooleanEquals": true,
            "Next": "Start Canary"
          },
          {
            "Variable": "$.polltargethealth.status",
            "StringEquals": "IN_PROGRESS",
            "Next": "WaitBeforeHealthCheck"
          }
        ],
        "Default": "Rollback Deployment"
      },
  
      "Start Canary": {
        "Type": "Pass",
        "Result": {
          "weights": [5, 20, 50, 100],
          "holdSecondsDefault": 120
        },
        "ResultPath": "$.canaryConfig",
        "Next": "Canary Map"
      },
  
      "Canary Map": {
        "Type": "Map",
        "ItemsPath": "$.canaryConfig.weights",
        "Parameters": {
          "weight.$": "$$.Map.Item.Value",
          "listener_arn.$": "$.parseartifact.LISTENER_ARN",
          "targetGroupArn.$": "$.checkbluegreen.next_deploy",
          "oldTargetGroupArn.$": "$.checkbluegreen.current_prod",
          "deploy_id.$": "$.registertaskdef.newTaskDefinitionArn",
          "holdSeconds.$": "$.canaryConfig.holdSecondsDefault"
        },
        "Iterator": {
          "StartAt": "Set ALB Weight",
          "States": {
            "Set ALB Weight": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:set-alb-weight",
                "Payload": {
                  "listener_arn.$": "$.listener_arn",
                  "targetGroupArn.$": "$.targetGroupArn",
                  "oldTargetGroupArn.$": "$.oldTargetGroupArn",
                  "weight.$": "$.weight"
                }
              },
              "Next": "Wait Hold",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.setWeightError",
                  "Next": "Trigger Rollback From Map"
                }
              ]
            },
            "Wait Hold": {
              "Type": "Wait",
              "SecondsPath": "$.holdSeconds",
              "Next": "Comprehensive Health Check"
            },
            "Comprehensive Health Check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:comprehensive-health-check",
                "Payload": {
                  "targetGroupArn.$": "$.targetGroupArn",
                  "deploy_id.$": "$.deploy_id",
                  "sampleCount": 30,
                  "baselineP95.$": "$.baselineP95"
                }
              },
              "ResultPath": "$.healthCheckResult",
              "Next": "Check Health Result In Map",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.healthCheckError",
                  "Next": "Trigger Rollback From Map"
                }
              ]
            },
            "Check Health Result In Map": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.healthCheckResult.Payload.healthy",
                  "BooleanEquals": true,
                  "Next": "Run Metrics Comparison"
                }
              ],
              "Default": "Trigger Rollback From Map"
            },
            "Run Metrics Comparison": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:check-deploy-metrics",
                "Payload": {
                  "newTargetGroup.$": "$.targetGroupArn",
                  "oldTargetGroup.$": "$.oldTargetGroupArn",
                  "deploy_id.$": "$.deploy_id",
                  "evaluationWindowMinutes": 5,
                  "thresholds": {
                    "max5xxRateIncreasePercent": 100,
                    "maxP95IncreasePercent": 30
                  }
                }
              },
              "ResultPath": "$.metricsResult",
              "Next": "Check Metrics Result",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.metricsCheckError",
                  "Next": "Trigger Rollback From Map"
                }
              ]
            },
            "Check Metrics Result": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.metricsResult.Payload.ok",
                  "BooleanEquals": true,
                  "Next": "Succeeded Iteration"
                }
              ],
              "Default": "Trigger Rollback From Map"
            },
            "Succeeded Iteration": { "Type": "Pass", "End": true },
            "Trigger Rollback From Map": {
              "Type": "Fail",
              "Error": "CanaryFailed",
              "Cause": "Canary iteration health/metrics failed"
            }
          }
        },
        "MaxConcurrency": 1,
        "Next": "Finalize Deployment",
        "Catch": [
          {
            "ErrorEquals": ["CanaryFailed","States.ALL"],
            "ResultPath": "$.canaryFailure",
            "Next": "Trigger Rollback"
          }
        ]
      },
  
      "Finalize Deployment": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:finalize-deployment",
          "Payload": {
            "deploy_id.$": "$.registertaskdef.newTaskDefinitionArn",
            "oldService.$": "$.updateservice.activeService",
            "newService.$": "$.updateservice.updatedService"
          }
        },
        "Next": "Notify Success",
        "Catch": [
          {
            "ErrorEquals": ["States.ALL"],
            "ResultPath": "$.finalizeError",
            "Next": "Trigger Rollback"
          }
        ]
      },
  
      "Notify Success": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:notify-deploy-success",
          "Payload": {
            "deploy_id.$": "$.registertaskdef.newTaskDefinitionArn",
            "details.$": "$"
          }
        },
        "Next": "Scale in old ECS Service"
      },
  
      "Scale in old ECS Service": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
          "Payload": {
            "oldServiceName.$": "$.updateservice.activeService",
            "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
          }
        },
        "ResultSelector": {
          "status.$": "$.Payload.status",
          "service.$": "$.Payload.service"
        },
        "End": true
      },
  
      "Trigger Rollback": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:rollback-deployment",
          "Payload": {
            "listener_arn.$": "$.parseartifact.LISTENER_ARN",
            "oldTargetGroup.$": "$.checkbluegreen.current_prod",
            "newTargetGroup.$": "$.checkbluegreen.next_deploy",
            "deploy_id.$": "$.registertaskdef.newTaskDefinitionArn",
            "reason.$": "Canary or validation failure"
          }
        },
        "Next": "Notify Rollback"
      },
  
      "Notify Rollback": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:notify-deploy-failure",
          "Payload": {
            "deploy_id.$": "$.registertaskdef.newTaskDefinitionArn",
            "details.$": "$"
          }
        },
        "End": true
      },
  
      "Rollback Deployment": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:rollback-deployment-when-healtch-check-fail",
          "Payload": {
            "oldTaskDefinitionArn.$": "$.registertaskdef.oldTaskDefinitionArn"
          }
        },
        "End": true
      }
    }
  }
  