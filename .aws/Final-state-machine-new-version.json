{
  "StartAt": "Parse Artifact",
  "States": {
    "Parse Artifact": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:parse-artifacts-from-CodeBuild",
        "Payload.$": "$"
      },
      "ResultSelector": {
        "TASK_FAMILY.$": "$.Payload.TASK_FAMILY",
        "ECS_CLUSTER.$": "$.Payload.ECS_CLUSTER",
        "CONTAINER_NAME.$": "$.Payload.CONTAINER_NAME",
        "LISTENER_ARN.$": "$.Payload.LISTENER_ARN"
      },
      "ResultPath": "$.parseartifact",
      "Next": "Register ECS Task Definition"
    },
    "Register ECS Task Definition": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:register-new-task-definition-v2",
        "Payload": {
          "imageUri.$": "$.imageUri",
          "CONTAINER_NAME.$": "$.parseartifact.CONTAINER_NAME",
          "TASK_FAMILY.$": "$.parseartifact.TASK_FAMILY"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "oldTaskDefinitionArn.$": "$.Payload.oldTaskDefinitionArn",
        "newTaskDefinitionArn.$": "$.Payload.newTaskDefinitionArn"
      },
      "ResultPath": "$.registertaskdef",
      "Next": "Update ECS Service"
    },
    "Update ECS Service": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:create-new-ecs-service-from-new-task-definition",
        "Payload": {
          "newTaskDefinitionArn.$": "$.registertaskdef.newTaskDefinitionArn",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER",
          "BASE_SERVICE.$": "$.BASE_SERVICE"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "activeService.$": "$.Payload.activeService",
        "updatedService.$": "$.Payload.updatedService",
        "taskDefinitionArn.$": "$.Payload.taskDefinitionArn",
        "targetGroupArn.$": "$.Payload.targetGroupArn"
      },
      "ResultPath": "$.updateservice",
      "Next": "WaitBeforeHealthCheck"
    },
    "WaitBeforeHealthCheck": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Blue Green"
    },
    "Check Blue Green": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:check-prod-stagging",
        "Payload": {
          "listener_arn.$": "$.parseartifact.LISTENER_ARN"
        }
      },
      "ResultSelector": {
        "current_prod.$": "$.Payload.current_prod",
        "next_deploy.$": "$.Payload.next_deploy"
      },
      "ResultPath": "$.checkbluegreen",
      "Next": "Poll Target Health"
    },
    "Poll Target Health": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:poll-target-health",
        "Payload": {
          "TargetGroupArn.$": "$.checkbluegreen.next_deploy"
        }
      },
      "ResultSelector": {
        "isHealthy.$": "$.Payload.isHealthy",
        "status.$": "$.Payload.status"
      },
      "ResultPath": "$.polltargethealth",
      "Next": "Check Health Result"
    },
    "Check Health Result": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.polltargethealth.isHealthy",
          "BooleanEquals": true,
          "Next": "Switch Traffic"
        },
        {
          "Variable": "$.polltargethealth.status",
          "StringEquals": "IN_PROGRESS",
          "Next": "WaitBeforeHealthCheck"
        }
      ],
      "Default": "Rollback Deployment"
    },
    "Switch Traffic": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload": {
          "listener_arn.$": "$.parseartifact.LISTENER_ARN",
          "next_deploy.$": "$.checkbluegreen.next_deploy"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status"
      },
      "ResultPath": "$.switchtraffic",
      "Next": "Scale in old ECS Service"
    },
    "Scale in old ECS Service": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "oldServiceName.$": "$.updateservice.activeService",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "service.$": "$.Payload.service"
      },
      "ResultPath": "$.scaleinoldservice",
      "End": true
    },
    "Rollback Deployment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:rollback-deployment-when-healtch-check-fail",
        "Payload": {
          "oldTaskDefinitionArn.$": "$.registertaskdef.oldTaskDefinitionArn"
        }
      },
      "End": true
    }
  }
}
