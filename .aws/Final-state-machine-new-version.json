{
  "StartAt": "Parse Artifact",
  "States": {
    "Parse Artifact": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:parse-artifacts-from-CodeBuild",
        "Payload.$": "$"
      },
      "ResultSelector": {
        "TASK_FAMILY.$": "$.Payload.TASK_FAMILY",
        "ECS_CLUSTER.$": "$.Payload.ECS_CLUSTER",
        "CONTAINER_NAME.$": "$.Payload.CONTAINER_NAME",
        "LISTENER_ARN.$": "$.Payload.LISTENER_ARN"
      },
      "ResultPath": "$.parseartifact",
      "Next": "Register ECS Task Definition"
    },
    "Register ECS Task Definition": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:register-new-task-definition-v2",
        "Payload": {
          "imageUri.$": "$.imageUri",
          "CONTAINER_NAME.$": "$.parseartifact.CONTAINER_NAME",
          "TASK_FAMILY.$": "$.parseartifact.TASK_FAMILY"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "oldTaskDefinitionArn.$": "$.Payload.oldTaskDefinitionArn",
        "newTaskDefinitionArn.$": "$.Payload.newTaskDefinitionArn"
      },
      "ResultPath": "$.registertaskdef",
      "Next": "Update ECS Service"
    },
    "Update ECS Service": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:create-new-ecs-service-from-new-task-definition",
        "Payload": {
          "newTaskDefinitionArn.$": "$.registertaskdef.newTaskDefinitionArn",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER",
          "BASE_SERVICE.$": "$.BASE_SERVICE"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "activeService.$": "$.Payload.activeService",
        "updatedService.$": "$.Payload.updatedService",
        "taskDefinitionArn.$": "$.Payload.taskDefinitionArn",
        "targetGroupArn.$": "$.Payload.targetGroupArn"
      },
      "ResultPath": "$.updateservice",
      "Next": "WaitBeforeHealthCheck"
    },
    "WaitBeforeHealthCheck": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Blue Green"
    },
    "Check Blue Green": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:check-prod-stagging",
        "Payload": {
          "listener_arn.$": "$.parseartifact.LISTENER_ARN"
        }
      },
      "ResultSelector": {
        "current_prod.$": "$.Payload.current_prod",
        "next_deploy.$": "$.Payload.next_deploy"
      },
      "ResultPath": "$.checkbluegreen",
      "Next": "Poll Target Health"
    },
    "Poll Target Health": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:poll-target-health",
        "Payload": {
          "TargetGroupArn.$": "$.checkbluegreen.next_deploy"
        }
      },
      "ResultSelector": {
        "isHealthy.$": "$.Payload.isHealthy",
        "status.$": "$.Payload.status"
      },
      "ResultPath": "$.polltargethealth",
      "Next": "Check Health Result"
    },
    "Check Health Result": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.polltargethealth.isHealthy",
          "BooleanEquals": true,
          "Next": "switch traffic from 0 to 25"
        },
        {
          "Variable": "$.polltargethealth.status",
          "StringEquals": "IN_PROGRESS",
          "Next": "WaitBeforeHealthCheck"
        }
      ],
      "Default": "Rollback Deployment when health check false"
    },
    "switch traffic from 0 to 25": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "listener_arn": "$.parseartifact.LISTENER_ARN",
          "current_prod": "$.checkbluegreen.current_prod",
          "next_deploy": "$.checkbluegreen.next_deploy",
          "WeightProd": 75,
          "WeightNext": 25
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Next": "Check CloudWatch after 25%",
      "Seconds": 60
    },
    "Check CloudWatch after 25%": {
      "Type": "Task",
      "Parameters": {
        "AlarmNames": ["MyECS-ErrorRate-Alarm"]
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "switch from 25 to 50"
        }
      ],
      "Default": "switch from 25 to 0"
    },
    "switch from 25 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Scale in ECS service errored"
    },
    "Scale in ECS service errored": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 25 to 50": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait (1)"
    },
    "Wait (1)": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 50%"
    },
    "Check CloudWatch after 50%": {
      "Type": "Task",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Next": "Choice (1)"
    },
    "Choice (1)": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "switch from 50 to 75"
        }
      ],
      "Default": "switch from 50 to 0"
    },
    "switch from 50 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Scale in ECS service errored 2"
    },
    "Scale in ECS service errored 2": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 50 to 75": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait (2)"
    },
    "Wait (2)": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 75%"
    },
    "Check CloudWatch after 75%": {
      "Type": "Task",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Next": "Choice (2)"
    },
    "Choice (2)": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "switch from 75 to 100%"
        }
      ],
      "Default": "switch from 75 to 0"
    },
    "switch from 75 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Scale in ECS service errored 3"
    },
    "Scale in ECS service errored 3": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "switch from 75 to 100%": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Wait (3)"
    },
    "Wait (3)": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check CloudWatch after 100%"
    },
    "Check CloudWatch after 100%": {
      "Type": "Task",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "Next": "Choice (3)"
    },
    "Choice (3)": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MetricAlarms[0].StateValue",
          "StringEquals": "OK",
          "Next": "Wait (4)"
        }
      ],
      "Default": "switch from 100 to 0"
    },
    "Wait (4)": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Scale in old ECS Service when Switch traffic success"
    },
    "switch from 100 to 0": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:shifting-traffic-to-new-ecs-service",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Scale in ECS service errored 4"
    },
    "Scale in ECS service errored 4": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    },
    "Scale in old ECS Service when Switch traffic success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "oldServiceName.$": "$.updateservice.activeService",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
        }
      },
      "ResultSelector": {
        "status.$": "$.Payload.status",
        "service.$": "$.Payload.service"
      },
      "ResultPath": "$.scaleinoldservice",
      "End": true
    },
    "Rollback Deployment when health check false": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-southeast-1:730335485777:function:scale-down-luan-van-frontend",
        "Payload": {
          "oldTaskDefinitionArn.$": "$.updateservice.updatedService",
          "ECS_CLUSTER.$": "$.parseartifact.ECS_CLUSTER"
        }
      },
      "End": true
    }
  }
}
